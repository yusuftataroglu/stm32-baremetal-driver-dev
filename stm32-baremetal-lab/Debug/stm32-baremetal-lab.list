
stm32-baremetal-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a74  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba4  08000bac  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ba4  08000ba4  00001bac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ba4  08000ba4  00001bac  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ba4  08000bac  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba4  08000ba4  00001ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ba8  08000ba8  00001ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bac  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bac  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001471  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000047d  00000000  00000000  00003046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  000034c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ce  00000000  00000000  000035e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000103f  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000096d  00000000  00000000  000046f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00005062  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000003b8  00000000  00000000  000050a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000088  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b8c 	.word	0x08000b8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b8c 	.word	0x08000b8c

08000170 <GPIO_PeriClockControl>:
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle);

void GPIO_PeriClockControl(GPIO_Handle_t *pGPIOHandle, uint8_t enorDi)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	GPIO_Mode_t pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	795b      	ldrb	r3, [r3, #5]
 8000180:	73fb      	strb	r3, [r7, #15]

	if (pinMode == GPIO_MODE_IT_RT || pinMode == GPIO_MODE_IT_FT
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	2b08      	cmp	r3, #8
 8000186:	d005      	beq.n	8000194 <GPIO_PeriClockControl+0x24>
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b07      	cmp	r3, #7
 800018c:	d002      	beq.n	8000194 <GPIO_PeriClockControl+0x24>
			|| pinMode == GPIO_MODE_IT_RFT)
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	2b09      	cmp	r3, #9
 8000192:	d105      	bne.n	80001a0 <GPIO_PeriClockControl+0x30>
	{
		RCC->APB2ENR |= (1 << 0);
 8000194:	4b2c      	ldr	r3, [pc, #176]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a2b      	ldr	r2, [pc, #172]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 800019a:	f043 0301 	orr.w	r3, r3, #1
 800019e:	6193      	str	r3, [r2, #24]
	}

	if (enorDi == 1)
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d123      	bne.n	80001ee <GPIO_PeriClockControl+0x7e>
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a28      	ldr	r2, [pc, #160]	@ (800024c <GPIO_PeriClockControl+0xdc>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d017      	beq.n	80001e0 <GPIO_PeriClockControl+0x70>
 80001b0:	4a26      	ldr	r2, [pc, #152]	@ (800024c <GPIO_PeriClockControl+0xdc>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d83f      	bhi.n	8000236 <GPIO_PeriClockControl+0xc6>
 80001b6:	4a26      	ldr	r2, [pc, #152]	@ (8000250 <GPIO_PeriClockControl+0xe0>)
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d003      	beq.n	80001c4 <GPIO_PeriClockControl+0x54>
 80001bc:	4a25      	ldr	r2, [pc, #148]	@ (8000254 <GPIO_PeriClockControl+0xe4>)
 80001be:	4293      	cmp	r3, r2
 80001c0:	d007      	beq.n	80001d2 <GPIO_PeriClockControl+0x62>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_EN();
			break;
		default:
			break;
 80001c2:	e038      	b.n	8000236 <GPIO_PeriClockControl+0xc6>
			GPIOA_PCLK_EN();
 80001c4:	4b20      	ldr	r3, [pc, #128]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
			break;
 80001d0:	e034      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_EN();
 80001d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	6193      	str	r3, [r2, #24]
			break;
 80001de:	e02d      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_EN();
 80001e0:	4b19      	ldr	r3, [pc, #100]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a18      	ldr	r2, [pc, #96]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6193      	str	r3, [r2, #24]
			break;
 80001ec:	e026      	b.n	800023c <GPIO_PeriClockControl+0xcc>
		}
	}
	else
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a16      	ldr	r2, [pc, #88]	@ (800024c <GPIO_PeriClockControl+0xdc>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d017      	beq.n	8000228 <GPIO_PeriClockControl+0xb8>
 80001f8:	4a14      	ldr	r2, [pc, #80]	@ (800024c <GPIO_PeriClockControl+0xdc>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d81d      	bhi.n	800023a <GPIO_PeriClockControl+0xca>
 80001fe:	4a14      	ldr	r2, [pc, #80]	@ (8000250 <GPIO_PeriClockControl+0xe0>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d003      	beq.n	800020c <GPIO_PeriClockControl+0x9c>
 8000204:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <GPIO_PeriClockControl+0xe4>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d007      	beq.n	800021a <GPIO_PeriClockControl+0xaa>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_DI();
			break;
		default:
			break;
 800020a:	e016      	b.n	800023a <GPIO_PeriClockControl+0xca>
			GPIOA_PCLK_DI();
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a0d      	ldr	r2, [pc, #52]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 8000212:	f023 0304 	bic.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]
			break;
 8000218:	e010      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_DI();
 800021a:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	4a0a      	ldr	r2, [pc, #40]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 8000220:	f023 0308 	bic.w	r3, r3, #8
 8000224:	6193      	str	r3, [r2, #24]
			break;
 8000226:	e009      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_DI();
 8000228:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <GPIO_PeriClockControl+0xd8>)
 800022e:	f023 0310 	bic.w	r3, r3, #16
 8000232:	6193      	str	r3, [r2, #24]
			break;
 8000234:	e002      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			break;
 8000236:	bf00      	nop
 8000238:	e000      	b.n	800023c <GPIO_PeriClockControl+0xcc>
			break;
 800023a:	bf00      	nop
		}
	}
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000
 800024c:	40011000 	.word	0x40011000
 8000250:	40010800 	.word	0x40010800
 8000254:	40010c00 	.word	0x40010c00

08000258 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
// 1. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle, ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f7ff ff84 	bl	8000170 <GPIO_PeriClockControl>

// 2. Configure pin mode (CNF + MODE)
	GPIO_ConfigMode(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4610      	mov	r0, r2
 8000274:	f000 f850 	bl	8000318 <GPIO_ConfigMode>

// 3. Configure speed if needed (only for output/AF)
	GPIO_ConfigSpeed(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3304      	adds	r3, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4610      	mov	r0, r2
 8000284:	f000 f8c2 	bl	800040c <GPIO_ConfigSpeed>

// 4. Configure pull-up/pull-down if needed (only for input PU/PD)
	GPIO_ConfigPuPd(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3304      	adds	r3, #4
 8000290:	4619      	mov	r1, r3
 8000292:	4610      	mov	r0, r2
 8000294:	f000 f91d 	bl	80004d2 <GPIO_ConfigPuPd>

// 5. Configure AFIO & EXTI registers if needed (only for interrupt modes)
	GPIO_ConfigInterrupt(pGPIOHandle);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 f953 	bl	8000544 <GPIO_ConfigInterrupt>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <GPIO_WriteToOutputPin>:
{
	return (uint16_t) pGPIOx->IDR;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber, uint8_t value)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
 80002ae:	460b      	mov	r3, r1
 80002b0:	70fb      	strb	r3, [r7, #3]
 80002b2:	4613      	mov	r3, r2
 80002b4:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 80002b6:	78bb      	ldrb	r3, [r7, #2]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d109      	bne.n	80002d0 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << pinNumber);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	78fa      	ldrb	r2, [r7, #3]
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	60da      	str	r2, [r3, #12]
	else
		pGPIOx->ODR &= ~(1 << pinNumber);
}
 80002ce:	e009      	b.n	80002e4 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << pinNumber);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	78fa      	ldrb	r2, [r7, #3]
 80002d6:	2101      	movs	r1, #1
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	401a      	ands	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	60da      	str	r2, [r3, #12]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	78fa      	ldrb	r2, [r7, #3]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	405a      	eors	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
	...

08000318 <GPIO_ConfigMode>:
 * @param[in] pPinConfig Pointer to the user-defined configuration structure for the pin.
 *
 * @return None
 */
static void GPIO_ConfigMode(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 8000318:	b480      	push	{r7}
 800031a:	b089      	sub	sp, #36	@ 0x24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	613b      	str	r3, [r7, #16]
	uint32_t mode = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
	uint32_t cnf = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
	uint32_t shiftAmount = (pinNumber % 8) * 4;
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	60fb      	str	r3, [r7, #12]

	volatile uint32_t *pConfigReg;

	if (pinNumber <= 7)
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	2b07      	cmp	r3, #7
 800033e:	d802      	bhi.n	8000346 <GPIO_ConfigMode+0x2e>
		pConfigReg = &pGPIOx->CRL;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e002      	b.n	800034c <GPIO_ConfigMode+0x34>
	else
		pConfigReg = &pGPIOx->CRH;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3304      	adds	r3, #4
 800034a:	617b      	str	r3, [r7, #20]

	switch (pPinConfig->GPIO_PinMode)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	2b09      	cmp	r3, #9
 8000352:	d856      	bhi.n	8000402 <GPIO_ConfigMode+0xea>
 8000354:	a201      	add	r2, pc, #4	@ (adr r2, 800035c <GPIO_ConfigMode+0x44>)
 8000356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035a:	bf00      	nop
 800035c:	08000385 	.word	0x08000385
 8000360:	0800038f 	.word	0x0800038f
 8000364:	080003a3 	.word	0x080003a3
 8000368:	080003ad 	.word	0x080003ad
 800036c:	080003b7 	.word	0x080003b7
 8000370:	080003c1 	.word	0x080003c1
 8000374:	08000399 	.word	0x08000399
 8000378:	080003cb 	.word	0x080003cb
 800037c:	080003cb 	.word	0x080003cb
 8000380:	080003cb 	.word	0x080003cb
	{
	case GPIO_MODE_INPUT:
		mode = 0x0;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;// Input floating
 8000388:	2301      	movs	r3, #1
 800038a:	61bb      	str	r3, [r7, #24]
		break;
 800038c:	e022      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_INPUT_PU_PD:
		mode = 0x0;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
		break;
 8000396:	e01d      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_ANALOG:
		mode = 0x0;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
		break;
 80003a0:	e018      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_PP:
		mode = 0x1;// Medium speed (10 MHz)
 80003a2:	2301      	movs	r3, #1
 80003a4:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
		break;
 80003aa:	e013      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_OD:
		mode = 0x1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	61bb      	str	r3, [r7, #24]
		break;
 80003b4:	e00e      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_PP:
		mode = 0x1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
		break;
 80003be:	e009      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_OD:
		mode = 0x1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	61fb      	str	r3, [r7, #28]
		cnf = 0x3;
 80003c4:	2303      	movs	r3, #3
 80003c6:	61bb      	str	r3, [r7, #24]
		break;
 80003c8:	e004      	b.n	80003d4 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_IT_FT:
	case GPIO_MODE_IT_RT:
	case GPIO_MODE_IT_RFT:
		mode = 0x0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
		break;
 80003d2:	bf00      	nop
	default:
		return;
	}
	*pConfigReg &= ~(0xF << shiftAmount);
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	210f      	movs	r1, #15
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	401a      	ands	r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	601a      	str	r2, [r3, #0]
	*pConfigReg |= ((cnf << 2) | mode) << shiftAmount;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	69bb      	ldr	r3, [r7, #24]
 80003ee:	0099      	lsls	r1, r3, #2
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	4319      	orrs	r1, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	fa01 f303 	lsl.w	r3, r1, r3
 80003fa:	431a      	orrs	r2, r3
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e000      	b.n	8000404 <GPIO_ConfigMode+0xec>
		return;
 8000402:	bf00      	nop
}
 8000404:	3724      	adds	r7, #36	@ 0x24
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <GPIO_ConfigSpeed>:
 * @param  pPinConfig: Pointer to the pin configuration structure
 *
 * @return None
 */
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 800040c:	b480      	push	{r7}
 800040e:	b087      	sub	sp, #28
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	785b      	ldrb	r3, [r3, #1]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d00b      	beq.n	8000436 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	785b      	ldrb	r3, [r3, #1]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d007      	beq.n	8000436 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_PP
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d003      	beq.n	8000436 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_OD)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	785b      	ldrb	r3, [r3, #1]
 8000432:	2b05      	cmp	r3, #5
 8000434:	d149      	bne.n	80004ca <GPIO_ConfigSpeed+0xbe>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	613b      	str	r3, [r7, #16]
		uint32_t shiftAmount = (pinNumber % 8) * 4;
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	60fb      	str	r3, [r7, #12]
		uint32_t modeBits = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
// Map enum to actual MODE[1:0] bits
		switch (pPinConfig->GPIO_PinSpeed)
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d00c      	beq.n	800046c <GPIO_ConfigSpeed+0x60>
 8000452:	2b02      	cmp	r3, #2
 8000454:	dc38      	bgt.n	80004c8 <GPIO_ConfigSpeed+0xbc>
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <GPIO_ConfigSpeed+0x54>
 800045a:	2b01      	cmp	r3, #1
 800045c:	d003      	beq.n	8000466 <GPIO_ConfigSpeed+0x5a>
			break;
		case GPIO_SPEED_HIGH:
			modeBits = 0b11;// 50 MHz
			break;
		default:
			return;// Invalid speed
 800045e:	e033      	b.n	80004c8 <GPIO_ConfigSpeed+0xbc>
			modeBits = 0b10;// 2 MHz
 8000460:	2302      	movs	r3, #2
 8000462:	617b      	str	r3, [r7, #20]
			break;
 8000464:	e005      	b.n	8000472 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b01;// 10 MHz
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
			break;
 800046a:	e002      	b.n	8000472 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b11;// 50 MHz
 800046c:	2303      	movs	r3, #3
 800046e:	617b      	str	r3, [r7, #20]
			break;
 8000470:	bf00      	nop
		}

		if (pinNumber < 8)
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b07      	cmp	r3, #7
 8000476:	d813      	bhi.n	80004a0 <GPIO_ConfigSpeed+0x94>
		{
			pGPIOx->CRL &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2103      	movs	r1, #3
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	43d2      	mvns	r2, r2
 8000486:	401a      	ands	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	601a      	str	r2, [r3, #0]
			pGPIOx->CRL |= (modeBits << shiftAmount);// set MODE[1:0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	6979      	ldr	r1, [r7, #20]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	431a      	orrs	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e014      	b.n	80004ca <GPIO_ConfigSpeed+0xbe>
		}
		else
		{
			pGPIOx->CRH &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2103      	movs	r1, #3
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	401a      	ands	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (modeBits << shiftAmount);// set MODE[1:0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685a      	ldr	r2, [r3, #4]
 80004b8:	6979      	ldr	r1, [r7, #20]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	fa01 f303 	lsl.w	r3, r1, r3
 80004c0:	431a      	orrs	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	e000      	b.n	80004ca <GPIO_ConfigSpeed+0xbe>
			return;// Invalid speed
 80004c8:	bf00      	nop
		}
	}
}
 80004ca:	371c      	adds	r7, #28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <GPIO_ConfigPuPd>:
 * @param pPinConfig Pointer to GPIO pin configuration structure.
 *
 * @return None
 */
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	6039      	str	r1, [r7, #0]
// Check if the pin mode is input with pull-up or pull-down
	GPIO_Mode_t pinMode = pPinConfig->GPIO_PinMode;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	73fb      	strb	r3, [r7, #15]

	if (pinMode == GPIO_MODE_INPUT_PU_PD || pinMode == GPIO_MODE_IT_FT
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d008      	beq.n	80004fa <GPIO_ConfigPuPd+0x28>
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	d005      	beq.n	80004fa <GPIO_ConfigPuPd+0x28>
			|| pinMode == GPIO_MODE_IT_RT || pinMode == GPIO_MODE_IT_RFT)
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d002      	beq.n	80004fa <GPIO_ConfigPuPd+0x28>
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	2b09      	cmp	r3, #9
 80004f8:	d11e      	bne.n	8000538 <GPIO_ConfigPuPd+0x66>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	60bb      	str	r3, [r7, #8]
		switch (pPinConfig->GPIO_PinPuPdControl)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	78db      	ldrb	r3, [r3, #3]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d002      	beq.n	800050e <GPIO_ConfigPuPd+0x3c>
 8000508:	2b02      	cmp	r3, #2
 800050a:	d00a      	beq.n	8000522 <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
			break;
		case GPIO_NOPULL:
		default:
// Do nothing
			break;
 800050c:	e014      	b.n	8000538 <GPIO_ConfigPuPd+0x66>
			pGPIOx->ODR |= (1 << pinNumber);// Set bit for pull-up
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	2101      	movs	r1, #1
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	fa01 f202 	lsl.w	r2, r1, r2
 800051a:	431a      	orrs	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
			break;
 8000520:	e00a      	b.n	8000538 <GPIO_ConfigPuPd+0x66>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	2101      	movs	r1, #1
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	43d2      	mvns	r2, r2
 8000530:	401a      	ands	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
			break;
 8000536:	bf00      	nop
		}
	}
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <GPIO_ConfigInterrupt>:
 * @note   This function only performs AFIO and EXTI configuration.
 *         NVIC configuration must be done separately using GPIO_IRQInterruptConfig().
 * @return None
 */
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	uint8_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	73fb      	strb	r3, [r7, #15]

	if (mode != GPIO_MODE_IT_FT && mode != GPIO_MODE_IT_RT
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b07      	cmp	r3, #7
 8000556:	d006      	beq.n	8000566 <GPIO_ConfigInterrupt+0x22>
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b08      	cmp	r3, #8
 800055c:	d003      	beq.n	8000566 <GPIO_ConfigInterrupt+0x22>
			&& mode != GPIO_MODE_IT_RFT)
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b09      	cmp	r3, #9
 8000562:	f040 8098 	bne.w	8000696 <GPIO_ConfigInterrupt+0x152>
	{
// Not an interrupt mode, exit early
		return;
	}
	/* 1. Map GPIO port to appropriate EXTI line via AFIO_EXTICR */
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	73bb      	strb	r3, [r7, #14]
	uint8_t extiCrIndex = pinNumber / 4;
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	737b      	strb	r3, [r7, #13]
	uint8_t fieldPosition = (pinNumber % 4) * 4;
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	f003 0303 	and.w	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	733b      	strb	r3, [r7, #12]

// Clear the target field first
	AFIO->EXTICR[extiCrIndex] &= ~(0xF << fieldPosition);
 800057e:	4a48      	ldr	r2, [pc, #288]	@ (80006a0 <GPIO_ConfigInterrupt+0x15c>)
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	3302      	adds	r3, #2
 8000584:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000588:	7b3b      	ldrb	r3, [r7, #12]
 800058a:	210f      	movs	r1, #15
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	4942      	ldr	r1, [pc, #264]	@ (80006a0 <GPIO_ConfigInterrupt+0x15c>)
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	4002      	ands	r2, r0
 800059a:	3302      	adds	r3, #2
 800059c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// Set the port code into the field
	uint8_t port_code = GPIO_PORT_CODE(pGPIOHandle->pGPIOx);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a3f      	ldr	r2, [pc, #252]	@ (80006a4 <GPIO_ConfigInterrupt+0x160>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00f      	beq.n	80005ca <GPIO_ConfigInterrupt+0x86>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a3e      	ldr	r2, [pc, #248]	@ (80006a8 <GPIO_ConfigInterrupt+0x164>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d008      	beq.n	80005c6 <GPIO_ConfigInterrupt+0x82>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a3c      	ldr	r2, [pc, #240]	@ (80006ac <GPIO_ConfigInterrupt+0x168>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <GPIO_ConfigInterrupt+0x7e>
 80005be:	2302      	movs	r3, #2
 80005c0:	e004      	b.n	80005cc <GPIO_ConfigInterrupt+0x88>
 80005c2:	2300      	movs	r3, #0
 80005c4:	e002      	b.n	80005cc <GPIO_ConfigInterrupt+0x88>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <GPIO_ConfigInterrupt+0x88>
 80005ca:	2300      	movs	r3, #0
 80005cc:	72fb      	strb	r3, [r7, #11]
	AFIO->EXTICR[extiCrIndex] |= (port_code << fieldPosition);
 80005ce:	4a34      	ldr	r2, [pc, #208]	@ (80006a0 <GPIO_ConfigInterrupt+0x15c>)
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	3302      	adds	r3, #2
 80005d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d8:	7af9      	ldrb	r1, [r7, #11]
 80005da:	7b3b      	ldrb	r3, [r7, #12]
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	492f      	ldr	r1, [pc, #188]	@ (80006a0 <GPIO_ConfigInterrupt+0x15c>)
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	4302      	orrs	r2, r0
 80005e8:	3302      	adds	r3, #2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* 2. Unmask the interrupt line in EXTI_IMR */
	EXTI->IMR |= (1 << pinNumber);
 80005ee:	4b30      	ldr	r3, [pc, #192]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	7bba      	ldrb	r2, [r7, #14]
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	6013      	str	r3, [r2, #0]

	/* 3. Configure rising/falling trigger */
	if (mode == GPIO_MODE_IT_FT)
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b07      	cmp	r3, #7
 8000606:	d115      	bne.n	8000634 <GPIO_ConfigInterrupt+0xf0>
	{
		EXTI->FTSR |= (1 << pinNumber);
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	7bba      	ldrb	r2, [r7, #14]
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a26      	ldr	r2, [pc, #152]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 8000618:	430b      	orrs	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	7bba      	ldrb	r2, [r7, #14]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	43d2      	mvns	r2, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800062e:	400b      	ands	r3, r1
 8000630:	6093      	str	r3, [r2, #8]
 8000632:	e031      	b.n	8000698 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RT)
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b08      	cmp	r3, #8
 8000638:	d115      	bne.n	8000666 <GPIO_ConfigInterrupt+0x122>
	{
		EXTI->RTSR |= (1 << pinNumber);
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	7bba      	ldrb	r2, [r7, #14]
 8000640:	2101      	movs	r1, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pinNumber);
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	7bba      	ldrb	r2, [r7, #14]
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 8000660:	400b      	ands	r3, r1
 8000662:	60d3      	str	r3, [r2, #12]
 8000664:	e018      	b.n	8000698 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RFT)
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b09      	cmp	r3, #9
 800066a:	d115      	bne.n	8000698 <GPIO_ConfigInterrupt+0x154>
	{
		EXTI->RTSR |= (1 << pinNumber);
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	7bba      	ldrb	r2, [r7, #14]
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 800067c:	430b      	orrs	r3, r1
 800067e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << pinNumber);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	7bba      	ldrb	r2, [r7, #14]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <GPIO_ConfigInterrupt+0x16c>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
 8000694:	e000      	b.n	8000698 <GPIO_ConfigInterrupt+0x154>
		return;
 8000696:	bf00      	nop
	}
}
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40010000 	.word	0x40010000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	40011000 	.word	0x40011000
 80006b0:	40010400 	.word	0x40010400

080006b4 <SPI_PeriClockControl>:
#include "stm32f103xx_gpio_driver.h"

static void SPI_GPIO_Config(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_Handle_t *pSPIHandle, uint8_t enOrDi)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d117      	bne.n	80006f6 <SPI_PeriClockControl+0x42>
	{
		if (pSPIHandle->pSPIx == SPI1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <SPI_PeriClockControl+0x7c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <SPI_PeriClockControl+0x2a>
			SPI1_PCLK_EN();
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <SPI_PeriClockControl+0x80>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <SPI_PeriClockControl+0x80>)
 80006d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006da:	6193      	str	r3, [r2, #24]
		if (pSPIHandle->pSPIx == SPI1)
			SPI1_PCLK_DI();
		else if (pSPIHandle->pSPIx == SPI2)
			SPI2_PCLK_DI();
	}
}
 80006dc:	e022      	b.n	8000724 <SPI_PeriClockControl+0x70>
		else if (pSPIHandle->pSPIx == SPI2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <SPI_PeriClockControl+0x84>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d11d      	bne.n	8000724 <SPI_PeriClockControl+0x70>
			SPI2_PCLK_EN();
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <SPI_PeriClockControl+0x80>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <SPI_PeriClockControl+0x80>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	61d3      	str	r3, [r2, #28]
}
 80006f4:	e016      	b.n	8000724 <SPI_PeriClockControl+0x70>
		if (pSPIHandle->pSPIx == SPI1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <SPI_PeriClockControl+0x7c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <SPI_PeriClockControl+0x5a>
			SPI1_PCLK_DI();
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <SPI_PeriClockControl+0x80>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <SPI_PeriClockControl+0x80>)
 8000706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800070a:	6193      	str	r3, [r2, #24]
}
 800070c:	e00a      	b.n	8000724 <SPI_PeriClockControl+0x70>
		else if (pSPIHandle->pSPIx == SPI2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <SPI_PeriClockControl+0x84>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d105      	bne.n	8000724 <SPI_PeriClockControl+0x70>
			SPI2_PCLK_DI();
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <SPI_PeriClockControl+0x80>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <SPI_PeriClockControl+0x80>)
 800071e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000722:	61d3      	str	r3, [r2, #28]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40013000 	.word	0x40013000
 8000734:	40021000 	.word	0x40021000
 8000738:	40003800 	.word	0x40003800

0800073c <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
// 1. Enable clock for SPI peripheral
	SPI_PeriClockControl(pSPIHandle, ENABLE);
 8000744:	2101      	movs	r1, #1
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffb4 	bl	80006b4 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]

// 2. Configure device mode (Master/Slave)
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4313      	orrs	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]

// 3. Configure bus configuration
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_FULL_DUPLEX)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d104      	bne.n	800076e <SPI_Init+0x32>
	{
// Clear BIDIMODE (bit 15) for full-duplex
		tempreg &= ~(1 << 15);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e014      	b.n	8000798 <SPI_Init+0x5c>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_HALF_DUPLEX)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d104      	bne.n	8000780 <SPI_Init+0x44>
	{
// Set BIDIMODE for half-duplex
		tempreg |= (1 << 15);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e00b      	b.n	8000798 <SPI_Init+0x5c>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	795b      	ldrb	r3, [r3, #5]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d107      	bne.n	8000798 <SPI_Init+0x5c>
	{
// Clear BIDIMODE and set RXONLY for simplex RX
		tempreg &= ~(1 << 15);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800078e:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000796:	60fb      	str	r3, [r7, #12]
	}

// 4. Configure SPI clock speed (baud rate control BR[2:0])
	tempreg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << 3);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	799b      	ldrb	r3, [r3, #6]
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]

// 5. Configure DFF (data frame format)
	tempreg |= (pSPIHandle->SPI_Config.SPI_DFF << 11);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	02db      	lsls	r3, r3, #11
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

// 6. Configure CPOL
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << 1);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a1b      	ldrb	r3, [r3, #8]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

// 7. Configure CPHA
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPHA << 0);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7a5b      	ldrb	r3, [r3, #9]
 80007c0:	461a      	mov	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]

// 8. Configure software slave management (SSM)
	tempreg |= (pSPIHandle->SPI_Config.SPI_SSM << 9);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a9b      	ldrb	r3, [r3, #10]
 80007cc:	025b      	lsls	r3, r3, #9
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]

// 9. Configure internal slave select bit
	if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_ENABLED)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7a9b      	ldrb	r3, [r3, #10]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d103      	bne.n	80007e4 <SPI_Init+0xa8>
	{
		tempreg |= (1 << 8);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007e2:	60fb      	str	r3, [r7, #12]
	}

// Write the final CR1 value
	pSPIHandle->pSPIx->CR1 = tempreg;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	601a      	str	r2, [r3, #0]

	uint32_t tempreg2 = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]

	if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_DISABLED)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7a9b      	ldrb	r3, [r3, #10]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d103      	bne.n	8000800 <SPI_Init+0xc4>
	{
		tempreg2 |= (1 << 2);// SSOE enable
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
	}

	pSPIHandle->pSPIx->CR2 = tempreg2;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	605a      	str	r2, [r3, #4]

	SPI_GPIO_Config(pSPIHandle);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f87f 	bl	800090c <SPI_GPIO_Config>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SPI_SendData>:
		RCC->APB1RSTR &= ~(1 << 14);
	}
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
	while (len > 0)
 8000822:	e023      	b.n	800086c <SPI_SendData+0x56>
	{
// Wait until TXE (Transmit buffer empty) is set
		while (!(pSPIx->SR & (1 << 1)));
 8000824:	bf00      	nop
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <SPI_SendData+0x10>

// Check DFF (data frame format)
		if (pSPIx->CR1 & (1 << 11))
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00b      	beq.n	8000856 <SPI_SendData+0x40>
		{
// 16-bit DFF
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3302      	adds	r3, #2
 800084c:	60bb      	str	r3, [r7, #8]
			len -= 2;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3b02      	subs	r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	e00a      	b.n	800086c <SPI_SendData+0x56>
		}
		else
		{
// 8-bit DFF
			pSPIx->DR = *pTxBuffer;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3301      	adds	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
			len--;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3b01      	subs	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
	while (len > 0)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1d8      	bne.n	8000824 <SPI_SendData+0xe>
		}
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	while (len > 0)
 800088a:	e035      	b.n	80008f8 <SPI_ReceiveData+0x7a>
	{
// 1. Wait until TXE is set (Transmit buffer empty)
		while (!(pSPIx->SR & (1 << 1)));
 800088c:	bf00      	nop
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f9      	beq.n	800088e <SPI_ReceiveData+0x10>

		if (pSPIx->CR1 & (1 << 11))// 16-bit DFF
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d016      	beq.n	80008d4 <SPI_ReceiveData+0x56>
		{
// 2. Send dummy byte to generate clock and receive data
			pSPIx->DR = 0xFFFF;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ac:	60da      	str	r2, [r3, #12]

// 3. Wait until RXNE is set (Receive buffer not empty)
			while (!(pSPIx->SR & (1 << 0)));
 80008ae:	bf00      	nop
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <SPI_ReceiveData+0x32>

// 4. Read received data from DR
			*((uint16_t*) pRxBuffer) = pSPIx->DR;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	801a      	strh	r2, [r3, #0]

			pRxBuffer += 2;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	3302      	adds	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
			len -= 2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b02      	subs	r3, #2
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	e011      	b.n	80008f8 <SPI_ReceiveData+0x7a>
		}
		else// 8-bit DFF
		{
//			pSPIx->DR = 0xFF;

			while (!(pSPIx->SR & (1 << 0)));
 80008d4:	bf00      	nop
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <SPI_ReceiveData+0x58>

			*pRxBuffer = pSPIx->DR;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]

			pRxBuffer++;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
			len--;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
	while (len > 0)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1c6      	bne.n	800088c <SPI_ReceiveData+0xe>
		}
	}

}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
	...

0800090c <SPI_GPIO_Config>:
 *        - SPI2: PB13 (SCK), PB14 (MISO), PB15 (MOSI)
 *
 * @return None
 */
static void SPI_GPIO_Config(SPI_Handle_t *pSPIHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t SPIPins;

	if (pSPIHandle->pSPIx == SPI1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <SPI_GPIO_Config+0x94>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d11b      	bne.n	8000956 <SPI_GPIO_Config+0x4a>
	{
// SCK
		SPIPins.pGPIOx = GPIOA;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <SPI_GPIO_Config+0x98>)
 8000920:	60bb      	str	r3, [r7, #8]
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000922:	2305      	movs	r3, #5
 8000924:	733b      	strb	r3, [r7, #12]
		SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 8000926:	2304      	movs	r3, #4
 8000928:	737b      	strb	r3, [r7, #13]
		SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800092a:	2301      	movs	r3, #1
 800092c:	73bb      	strb	r3, [r7, #14]
		GPIO_Init(&SPIPins);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc90 	bl	8000258 <GPIO_Init>

// MISO
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000938:	2306      	movs	r3, #6
 800093a:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc89 	bl	8000258 <GPIO_Init>

// MOSI
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000946:	2307      	movs	r3, #7
 8000948:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc82 	bl	8000258 <GPIO_Init>

// MOSI
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
		GPIO_Init(&SPIPins);
	}
}
 8000954:	e01f      	b.n	8000996 <SPI_GPIO_Config+0x8a>
	else if (pSPIHandle->pSPIx == SPI2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <SPI_GPIO_Config+0x9c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d11a      	bne.n	8000996 <SPI_GPIO_Config+0x8a>
		SPIPins.pGPIOx = GPIOB;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <SPI_GPIO_Config+0xa0>)
 8000962:	60bb      	str	r3, [r7, #8]
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000964:	230d      	movs	r3, #13
 8000966:	733b      	strb	r3, [r7, #12]
		SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 8000968:	2304      	movs	r3, #4
 800096a:	737b      	strb	r3, [r7, #13]
		SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800096c:	2301      	movs	r3, #1
 800096e:	73bb      	strb	r3, [r7, #14]
		GPIO_Init(&SPIPins);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc6f 	bl	8000258 <GPIO_Init>
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800097a:	230e      	movs	r3, #14
 800097c:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc68 	bl	8000258 <GPIO_Init>
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000988:	230f      	movs	r3, #15
 800098a:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc61 	bl	8000258 <GPIO_Init>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40003800 	.word	0x40003800
 80009ac:	40010c00 	.word	0x40010c00

080009b0 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d106      	bne.n	80009d0 <SPI_PeripheralControl+0x20>
	{
// Enable SPE bit
		pSPIx->CR1 |= (1 << 6);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
	else
	{
// Disable SPE bit
		pSPIx->CR1 &= ~(1 << 6);
	}
}
 80009ce:	e005      	b.n	80009dc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << 6);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <delay>:
#include "stm32f103xx_spi_driver.h"
#include "stm32f103xx_gpio_driver.h"

void delay(uint32_t count)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < count; i++);
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e002      	b.n	80009fa <delay+0x14>
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3f8      	bcc.n	80009f4 <delay+0xe>
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <main>:

int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI1;
 8000a16:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <main+0xd0>)
 8000a18:	613b      	str	r3, [r7, #16]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_MODE_MASTER;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	753b      	strb	r3, [r7, #20]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	757b      	strb	r3, [r7, #21]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000a22:	2300      	movs	r3, #0
 8000a24:	75fb      	strb	r3, [r7, #23]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	763b      	strb	r3, [r7, #24]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_FIRST_EDGE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	767b      	strb	r3, [r7, #25]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_ENABLED;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	76bb      	strb	r3, [r7, #26]

	SPI_Init(&SPI1Handle);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe80 	bl	800073c <SPI_Init>

	GPIO_Handle_t led;
	led.pGPIOx = GPIOA;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <main+0xd4>)
 8000a3e:	60bb      	str	r3, [r7, #8]
	led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	737b      	strb	r3, [r7, #13]
	led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	733b      	strb	r3, [r7, #12]
	led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(&led);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fc01 	bl	8000258 <GPIO_Init>

	uint8_t tx_data = 0xAB;
 8000a56:	23ab      	movs	r3, #171	@ 0xab
 8000a58:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71bb      	strb	r3, [r7, #6]

	while (1)
	{
		SPI_PeripheralControl(SPI1Handle.pSPIx, ENABLE);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ffa4 	bl	80009b0 <SPI_PeripheralControl>
		SPI_SendData(SPI1Handle.pSPIx, &tx_data, 1);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fed1 	bl	8000816 <SPI_SendData>
		SPI_ReceiveData(SPI1Handle.pSPIx, &rx_data, 1);
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	1db9      	adds	r1, r7, #6
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff feff 	bl	800087e <SPI_ReceiveData>
		SPI_PeripheralControl(SPI1Handle.pSPIx, DISABLE);
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff93 	bl	80009b0 <SPI_PeripheralControl>

		if (rx_data == tx_data)
 8000a8a:	79ba      	ldrb	r2, [r7, #6]
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d109      	bne.n	8000aa6 <main+0x96>
		{
			GPIO_WriteToOutputPin(led.pGPIOx, GPIO_PIN_0, 1);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2201      	movs	r2, #1
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fc04 	bl	80002a6 <GPIO_WriteToOutputPin>
			delay(200000);
 8000a9e:	4812      	ldr	r0, [pc, #72]	@ (8000ae8 <main+0xd8>)
 8000aa0:	f7ff ffa1 	bl	80009e6 <delay>
 8000aa4:	e011      	b.n	8000aca <main+0xba>
		}
		else
		{
			for (uint32_t i = 0; i < 10; ++i)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e00b      	b.n	8000ac4 <main+0xb4>
			{
				GPIO_ToggleOutputPin(led.pGPIOx, GPIO_PIN_0);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fc1c 	bl	80002ee <GPIO_ToggleOutputPin>
				delay(20000);
 8000ab6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000aba:	f7ff ff94 	bl	80009e6 <delay>
			for (uint32_t i = 0; i < 10; ++i)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d9f0      	bls.n	8000aac <main+0x9c>
			}
		}
		GPIO_WriteToOutputPin(led.pGPIOx, GPIO_PIN_0, 0);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fbe8 	bl	80002a6 <GPIO_WriteToOutputPin>
		delay(500000);
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <main+0xdc>)
 8000ad8:	f7ff ff85 	bl	80009e6 <delay>
		SPI_PeripheralControl(SPI1Handle.pSPIx, ENABLE);
 8000adc:	e7bf      	b.n	8000a5e <main+0x4e>
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	00030d40 	.word	0x00030d40
 8000aec:	0007a120 	.word	0x0007a120

08000af0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	@ (8000b3c <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b1e:	f000 f811 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000b22:	f7ff ff75 	bl	8000a10 <main>

08000b26 <LoopForever>:

LoopForever:
  b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
  ldr   r0, =_estack
 8000b28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b34:	08000bac 	.word	0x08000bac
  ldr r2, =_sbss
 8000b38:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b3c:	2000001c 	.word	0x2000001c

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2600      	movs	r6, #0
 8000b48:	4d0c      	ldr	r5, [pc, #48]	@ (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4c0d      	ldr	r4, [pc, #52]	@ (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a6      	cmp	r6, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	f000 f81a 	bl	8000b8c <_init>
 8000b58:	2600      	movs	r6, #0
 8000b5a:	4d0a      	ldr	r5, [pc, #40]	@ (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a6      	cmp	r6, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6c:	4798      	blx	r3
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b76:	4798      	blx	r3
 8000b78:	3601      	adds	r6, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000ba4 	.word	0x08000ba4
 8000b80:	08000ba4 	.word	0x08000ba4
 8000b84:	08000ba4 	.word	0x08000ba4
 8000b88:	08000ba8 	.word	0x08000ba8

08000b8c <_init>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr

08000b98 <_fini>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	bf00      	nop
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr
