
stm32-baremetal-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080007d0  080007d0  000017d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007d8  080007d8  000017e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007d8  080007d8  000017e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007d8  080007e0  000017e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d8  080007d8  000017d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007dc  080007dc  000017dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000aef  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000320  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008d  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000a60  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000068c  00000000  00000000  000031cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00003859  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000270  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000088  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007b8 	.word	0x080007b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007b8 	.word	0x080007b8

08000170 <GPIO_PeriClockControl>:
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle);

void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx, uint8_t enorDi)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	if (enorDi == 1)
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d122      	bne.n	80001c8 <GPIO_PeriClockControl+0x58>
	{
		switch ((uint32_t) GPIOx)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a26      	ldr	r2, [pc, #152]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d017      	beq.n	80001ba <GPIO_PeriClockControl+0x4a>
 800018a:	4a25      	ldr	r2, [pc, #148]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 800018c:	4293      	cmp	r3, r2
 800018e:	d83e      	bhi.n	800020e <GPIO_PeriClockControl+0x9e>
 8000190:	4a24      	ldr	r2, [pc, #144]	@ (8000224 <GPIO_PeriClockControl+0xb4>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d003      	beq.n	800019e <GPIO_PeriClockControl+0x2e>
 8000196:	4a24      	ldr	r2, [pc, #144]	@ (8000228 <GPIO_PeriClockControl+0xb8>)
 8000198:	4293      	cmp	r3, r2
 800019a:	d007      	beq.n	80001ac <GPIO_PeriClockControl+0x3c>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_EN();
			break;
		default:
			break;
 800019c:	e037      	b.n	800020e <GPIO_PeriClockControl+0x9e>
			GPIOA_PCLK_EN();
 800019e:	4b23      	ldr	r3, [pc, #140]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a22      	ldr	r2, [pc, #136]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6193      	str	r3, [r2, #24]
			break;
 80001aa:	e033      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOB_PCLK_EN();
 80001ac:	4b1f      	ldr	r3, [pc, #124]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1e      	ldr	r2, [pc, #120]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]
			break;
 80001b8:	e02c      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOC_PCLK_EN();
 80001ba:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a1b      	ldr	r2, [pc, #108]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6193      	str	r3, [r2, #24]
			break;
 80001c6:	e025      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
		}
	}
	else
	{
		switch ((uint32_t) GPIOx)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4a15      	ldr	r2, [pc, #84]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 80001cc:	4293      	cmp	r3, r2
 80001ce:	d017      	beq.n	8000200 <GPIO_PeriClockControl+0x90>
 80001d0:	4a13      	ldr	r2, [pc, #76]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d81d      	bhi.n	8000212 <GPIO_PeriClockControl+0xa2>
 80001d6:	4a13      	ldr	r2, [pc, #76]	@ (8000224 <GPIO_PeriClockControl+0xb4>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d003      	beq.n	80001e4 <GPIO_PeriClockControl+0x74>
 80001dc:	4a12      	ldr	r2, [pc, #72]	@ (8000228 <GPIO_PeriClockControl+0xb8>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d007      	beq.n	80001f2 <GPIO_PeriClockControl+0x82>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_DI();
			break;
		default:
			break;
 80001e2:	e016      	b.n	8000212 <GPIO_PeriClockControl+0xa2>
			GPIOA_PCLK_DI();
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a10      	ldr	r2, [pc, #64]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001ea:	f023 0304 	bic.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
			break;
 80001f0:	e010      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOB_PCLK_DI();
 80001f2:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001f8:	f023 0308 	bic.w	r3, r3, #8
 80001fc:	6193      	str	r3, [r2, #24]
			break;
 80001fe:	e009      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOC_PCLK_DI();
 8000200:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a09      	ldr	r2, [pc, #36]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 8000206:	f023 0310 	bic.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]
			break;
 800020c:	e002      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			break;
 800020e:	bf00      	nop
 8000210:	e000      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			break;
 8000212:	bf00      	nop
		}
	}
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40011000 	.word	0x40011000
 8000224:	40010800 	.word	0x40010800
 8000228:	40010c00 	.word	0x40010c00
 800022c:	40021000 	.word	0x40021000

08000230 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
// 1. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2101      	movs	r1, #1
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff96 	bl	8000170 <GPIO_PeriClockControl>

// 2. Configure pin mode (CNF + MODE)
	GPIO_ConfigMode(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3304      	adds	r3, #4
 800024c:	4619      	mov	r1, r3
 800024e:	4610      	mov	r0, r2
 8000250:	f000 f83a 	bl	80002c8 <GPIO_ConfigMode>

// 3. Configure speed if needed (only for output/AF)
	GPIO_ConfigSpeed(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3304      	adds	r3, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4610      	mov	r0, r2
 8000260:	f000 f8ac 	bl	80003bc <GPIO_ConfigSpeed>

// 4. Configure pull-up/pull-down if needed (only for input PU/PD)
	GPIO_ConfigPuPd(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3304      	adds	r3, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4610      	mov	r0, r2
 8000270:	f000 f907 	bl	8000482 <GPIO_ConfigPuPd>

// 5. Configure AFIO & EXTI registers if needed (only for interrupt modes)
    GPIO_ConfigInterrupt(pGPIOHandle);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f931 	bl	80004dc <GPIO_ConfigInterrupt>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <GPIO_ReadFromInputPin>:
		RCC->APB2RSTR &= ~(1 << 4);
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	460b      	mov	r3, r1
 800028c:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	78fb      	ldrb	r3, [r7, #3]
 8000294:	fa22 f303 	lsr.w	r3, r2, r3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	b2db      	uxtb	r3, r3
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr

080002aa <GPIO_WriteToOutputPort>:
	else
		pGPIOx->ODR &= ~(1 << pinNumber);
}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	460b      	mov	r3, r1
 80002b4:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR = value;
 80002b6:	887a      	ldrh	r2, [r7, #2]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	60da      	str	r2, [r3, #12]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <GPIO_ConfigMode>:
 * @param[in] pPinConfig Pointer to the user-defined configuration structure for the pin.
 *
 * @return None
 */
static void GPIO_ConfigMode(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	@ 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	613b      	str	r3, [r7, #16]
	uint32_t mode = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	61fb      	str	r3, [r7, #28]
	uint32_t cnf = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
	uint32_t shiftAmount = (pinNumber % 8) * 4;
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	60fb      	str	r3, [r7, #12]

	volatile uint32_t *pConfigReg;

	if (pinNumber <= 7)
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	d802      	bhi.n	80002f6 <GPIO_ConfigMode+0x2e>
		pConfigReg = &pGPIOx->CRL;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e002      	b.n	80002fc <GPIO_ConfigMode+0x34>
	else
		pConfigReg = &pGPIOx->CRH;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3304      	adds	r3, #4
 80002fa:	617b      	str	r3, [r7, #20]

	switch (pPinConfig->GPIO_PinMode)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	2b09      	cmp	r3, #9
 8000302:	d856      	bhi.n	80003b2 <GPIO_ConfigMode+0xea>
 8000304:	a201      	add	r2, pc, #4	@ (adr r2, 800030c <GPIO_ConfigMode+0x44>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000335 	.word	0x08000335
 8000310:	0800033f 	.word	0x0800033f
 8000314:	08000353 	.word	0x08000353
 8000318:	0800035d 	.word	0x0800035d
 800031c:	08000367 	.word	0x08000367
 8000320:	08000371 	.word	0x08000371
 8000324:	08000349 	.word	0x08000349
 8000328:	0800037b 	.word	0x0800037b
 800032c:	0800037b 	.word	0x0800037b
 8000330:	0800037b 	.word	0x0800037b
	{
	case GPIO_MODE_INPUT:
		mode = 0x0;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;// Input floating
 8000338:	2301      	movs	r3, #1
 800033a:	61bb      	str	r3, [r7, #24]
		break;
 800033c:	e022      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_INPUT_PU_PD:
		mode = 0x0;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
		break;
 8000346:	e01d      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_ANALOG:
		mode = 0x0;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
		break;
 8000350:	e018      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_PP:
		mode = 0x1;// Medium speed (10 MHz)
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
		break;
 800035a:	e013      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_OD:
		mode = 0x1;
 800035c:	2301      	movs	r3, #1
 800035e:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
		break;
 8000364:	e00e      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_PP:
		mode = 0x1;
 8000366:	2301      	movs	r3, #1
 8000368:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
		break;
 800036e:	e009      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_OD:
		mode = 0x1;
 8000370:	2301      	movs	r3, #1
 8000372:	61fb      	str	r3, [r7, #28]
		cnf = 0x3;
 8000374:	2303      	movs	r3, #3
 8000376:	61bb      	str	r3, [r7, #24]
		break;
 8000378:	e004      	b.n	8000384 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_IT_FT:
	case GPIO_MODE_IT_RT:
	case GPIO_MODE_IT_RFT:
		mode = 0x0;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 800037e:	2301      	movs	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
		break;
 8000382:	bf00      	nop
	default:
		return;
	}
	*pConfigReg &= ~(0xF << shiftAmount);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	210f      	movs	r1, #15
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	43d2      	mvns	r2, r2
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	601a      	str	r2, [r3, #0]
	*pConfigReg |= ((cnf << 2) | mode) << shiftAmount;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	0099      	lsls	r1, r3, #2
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	4319      	orrs	r1, r3
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	431a      	orrs	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	e000      	b.n	80003b4 <GPIO_ConfigMode+0xec>
		return;
 80003b2:	bf00      	nop
}
 80003b4:	3724      	adds	r7, #36	@ 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <GPIO_ConfigSpeed>:
 * @param  pPinConfig: Pointer to the pin configuration structure
 *
 * @return None
 */
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80003bc:	b480      	push	{r7}
 80003be:	b087      	sub	sp, #28
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d00b      	beq.n	80003e6 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d007      	beq.n	80003e6 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_PP
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	785b      	ldrb	r3, [r3, #1]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	d003      	beq.n	80003e6 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_OD)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	785b      	ldrb	r3, [r3, #1]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d149      	bne.n	800047a <GPIO_ConfigSpeed+0xbe>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	613b      	str	r3, [r7, #16]
		uint32_t shiftAmount = (pinNumber % 8) * 4;
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	f003 0307 	and.w	r3, r3, #7
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
		uint32_t modeBits = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
// Map enum to actual MODE[1:0] bits
		switch (pPinConfig->GPIO_PinSpeed)
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d00c      	beq.n	800041c <GPIO_ConfigSpeed+0x60>
 8000402:	2b02      	cmp	r3, #2
 8000404:	dc38      	bgt.n	8000478 <GPIO_ConfigSpeed+0xbc>
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <GPIO_ConfigSpeed+0x54>
 800040a:	2b01      	cmp	r3, #1
 800040c:	d003      	beq.n	8000416 <GPIO_ConfigSpeed+0x5a>
			break;
		case GPIO_SPEED_HIGH:
			modeBits = 0b11;// 50 MHz
			break;
		default:
			return;// Invalid speed
 800040e:	e033      	b.n	8000478 <GPIO_ConfigSpeed+0xbc>
			modeBits = 0b10;// 2 MHz
 8000410:	2302      	movs	r3, #2
 8000412:	617b      	str	r3, [r7, #20]
			break;
 8000414:	e005      	b.n	8000422 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b01;// 10 MHz
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
			break;
 800041a:	e002      	b.n	8000422 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b11;// 50 MHz
 800041c:	2303      	movs	r3, #3
 800041e:	617b      	str	r3, [r7, #20]
			break;
 8000420:	bf00      	nop
		}

		if (pinNumber < 8)
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d813      	bhi.n	8000450 <GPIO_ConfigSpeed+0x94>
		{
			pGPIOx->CRL &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2103      	movs	r1, #3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	401a      	ands	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	601a      	str	r2, [r3, #0]
			pGPIOx->CRL |= (modeBits << shiftAmount);// set MODE[1:0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	6979      	ldr	r1, [r7, #20]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	e014      	b.n	800047a <GPIO_ConfigSpeed+0xbe>
		}
		else
		{
			pGPIOx->CRH &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2103      	movs	r1, #3
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (modeBits << shiftAmount);// set MODE[1:0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	6979      	ldr	r1, [r7, #20]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	e000      	b.n	800047a <GPIO_ConfigSpeed+0xbe>
			return;// Invalid speed
 8000478:	bf00      	nop
		}
	}
}
 800047a:	371c      	adds	r7, #28
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <GPIO_ConfigPuPd>:
 * @param pPinConfig Pointer to GPIO pin configuration structure.
 *
 * @return None
 */
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 8000482:	b480      	push	{r7}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
// Check if the pin mode is input with pull-up or pull-down
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU_PD)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	785b      	ldrb	r3, [r3, #1]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d11e      	bne.n	80004d2 <GPIO_ConfigPuPd+0x50>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
		switch (pPinConfig->GPIO_PinPuPdControl)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	78db      	ldrb	r3, [r3, #3]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d002      	beq.n	80004a8 <GPIO_ConfigPuPd+0x26>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d00a      	beq.n	80004bc <GPIO_ConfigPuPd+0x3a>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
			break;
		case GPIO_NOPULL:
		default:
// Do nothing
			break;
 80004a6:	e014      	b.n	80004d2 <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR |= (1 << pinNumber);// Set bit for pull-up
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	2101      	movs	r1, #1
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	60da      	str	r2, [r3, #12]
			break;
 80004ba:	e00a      	b.n	80004d2 <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	2101      	movs	r1, #1
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	401a      	ands	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]
			break;
 80004d0:	bf00      	nop
		}
	}
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <GPIO_ConfigInterrupt>:
 * @note   This function only performs AFIO and EXTI configuration.
 *         NVIC configuration must be done separately using GPIO_IRQInterruptConfig().
 * @return None
 */
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint8_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	73fb      	strb	r3, [r7, #15]

	if (mode != GPIO_MODE_IT_FT && mode != GPIO_MODE_IT_RT
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	2b07      	cmp	r3, #7
 80004ee:	d006      	beq.n	80004fe <GPIO_ConfigInterrupt+0x22>
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d003      	beq.n	80004fe <GPIO_ConfigInterrupt+0x22>
			&& mode != GPIO_MODE_IT_RFT)
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	f040 8098 	bne.w	800062e <GPIO_ConfigInterrupt+0x152>
	{
// Not an interrupt mode, exit early
		return;
	}
	/* 1. Map GPIO port to appropriate EXTI line via AFIO_EXTICR */
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	73bb      	strb	r3, [r7, #14]
	uint8_t extiCrIndex = pinNumber / 4;
 8000504:	7bbb      	ldrb	r3, [r7, #14]
 8000506:	089b      	lsrs	r3, r3, #2
 8000508:	737b      	strb	r3, [r7, #13]
	uint8_t fieldPosition = (pinNumber % 4) * 4;
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	733b      	strb	r3, [r7, #12]

// Clear the target field first
	AFIO->EXTICR[extiCrIndex] &= ~(0xF << fieldPosition);
 8000516:	4a48      	ldr	r2, [pc, #288]	@ (8000638 <GPIO_ConfigInterrupt+0x15c>)
 8000518:	7b7b      	ldrb	r3, [r7, #13]
 800051a:	3302      	adds	r3, #2
 800051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000520:	7b3b      	ldrb	r3, [r7, #12]
 8000522:	210f      	movs	r1, #15
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	4942      	ldr	r1, [pc, #264]	@ (8000638 <GPIO_ConfigInterrupt+0x15c>)
 800052e:	7b7b      	ldrb	r3, [r7, #13]
 8000530:	4002      	ands	r2, r0
 8000532:	3302      	adds	r3, #2
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// Set the port code into the field
	uint8_t port_code = GPIO_PORT_CODE(pGPIOHandle->pGPIOx);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <GPIO_ConfigInterrupt+0x160>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d00f      	beq.n	8000562 <GPIO_ConfigInterrupt+0x86>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a3e      	ldr	r2, [pc, #248]	@ (8000640 <GPIO_ConfigInterrupt+0x164>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d008      	beq.n	800055e <GPIO_ConfigInterrupt+0x82>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a3c      	ldr	r2, [pc, #240]	@ (8000644 <GPIO_ConfigInterrupt+0x168>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <GPIO_ConfigInterrupt+0x7e>
 8000556:	2302      	movs	r3, #2
 8000558:	e004      	b.n	8000564 <GPIO_ConfigInterrupt+0x88>
 800055a:	2300      	movs	r3, #0
 800055c:	e002      	b.n	8000564 <GPIO_ConfigInterrupt+0x88>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <GPIO_ConfigInterrupt+0x88>
 8000562:	2300      	movs	r3, #0
 8000564:	72fb      	strb	r3, [r7, #11]
	AFIO->EXTICR[extiCrIndex] |= (port_code << fieldPosition);
 8000566:	4a34      	ldr	r2, [pc, #208]	@ (8000638 <GPIO_ConfigInterrupt+0x15c>)
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	3302      	adds	r3, #2
 800056c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000570:	7af9      	ldrb	r1, [r7, #11]
 8000572:	7b3b      	ldrb	r3, [r7, #12]
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	4618      	mov	r0, r3
 800057a:	492f      	ldr	r1, [pc, #188]	@ (8000638 <GPIO_ConfigInterrupt+0x15c>)
 800057c:	7b7b      	ldrb	r3, [r7, #13]
 800057e:	4302      	orrs	r2, r0
 8000580:	3302      	adds	r3, #2
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* 2. Unmask the interrupt line in EXTI_IMR */
	EXTI->IMR |= (1 << pinNumber);
 8000586:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	7bba      	ldrb	r2, [r7, #14]
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a2c      	ldr	r2, [pc, #176]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]

	/* 3. Configure rising/falling trigger */
	if (mode == GPIO_MODE_IT_FT)
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2b07      	cmp	r3, #7
 800059e:	d115      	bne.n	80005cc <GPIO_ConfigInterrupt+0xf0>
	{
		EXTI->FTSR |= (1 << pinNumber);
 80005a0:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	7bba      	ldrb	r2, [r7, #14]
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	7bba      	ldrb	r2, [r7, #14]
 80005ba:	2101      	movs	r1, #1
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	6093      	str	r3, [r2, #8]
 80005ca:	e031      	b.n	8000630 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RT)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d115      	bne.n	80005fe <GPIO_ConfigInterrupt+0x122>
	{
		EXTI->RTSR |= (1 << pinNumber);
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	7bba      	ldrb	r2, [r7, #14]
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pinNumber);
 80005e6:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	7bba      	ldrb	r2, [r7, #14]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
 80005fc:	e018      	b.n	8000630 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RFT)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b09      	cmp	r3, #9
 8000602:	d115      	bne.n	8000630 <GPIO_ConfigInterrupt+0x154>
	{
		EXTI->RTSR |= (1 << pinNumber);
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	7bba      	ldrb	r2, [r7, #14]
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << pinNumber);
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	7bba      	ldrb	r2, [r7, #14]
 800061e:	2101      	movs	r1, #1
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <GPIO_ConfigInterrupt+0x16c>)
 8000628:	430b      	orrs	r3, r1
 800062a:	60d3      	str	r3, [r2, #12]
 800062c:	e000      	b.n	8000630 <GPIO_ConfigInterrupt+0x154>
		return;
 800062e:	bf00      	nop
	}
}
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40010000 	.word	0x40010000
 800063c:	40010800 	.word	0x40010800
 8000640:	40010c00 	.word	0x40010c00
 8000644:	40011000 	.word	0x40011000
 8000648:	40010400 	.word	0x40010400

0800064c <delay>:

#define BTN_PRESSED 0
#define LEDS_ON_MASK  ( (1 << 10) | (1 << 11) | (1 << 12) )

void delay()
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 100000; ++i);
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e002      	b.n	800065e <delay+0x12>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <delay+0x28>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d9f8      	bls.n	8000658 <delay+0xc>
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	0001869f 	.word	0x0001869f

08000678 <main>:

int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

	uint16_t led_pins[] = { GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12 };
 800067e:	4a24      	ldr	r2, [pc, #144]	@ (8000710 <main+0x98>)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000688:	6018      	str	r0, [r3, #0]
 800068a:	3304      	adds	r3, #4
 800068c:	8019      	strh	r1, [r3, #0]
	for (int i = 0; i < 3; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	e016      	b.n	80006c2 <main+0x4a>
	{
		GPIO_Handle_t led;
		led.pGPIOx = GPIOC;
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <main+0x9c>)
 8000696:	607b      	str	r3, [r7, #4]
		led.GPIO_PinConfig.GPIO_PinNumber = led_pins[i];
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	3320      	adds	r3, #32
 800069e:	443b      	add	r3, r7
 80006a0:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	723b      	strb	r3, [r7, #8]
		led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	727b      	strb	r3, [r7, #9]
		led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80006ac:	2301      	movs	r3, #1
 80006ae:	72bb      	strb	r3, [r7, #10]
		led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(&led);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fdba 	bl	8000230 <GPIO_Init>
	for (int i = 0; i < 3; i++)
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	3301      	adds	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	dde5      	ble.n	8000694 <main+0x1c>
	}

	GPIO_Handle_t btn;
	btn.pGPIOx = GPIOA;
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <main+0xa0>)
 80006ca:	60fb      	str	r3, [r7, #12]
	btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	743b      	strb	r3, [r7, #16]
	btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT_PU_PD;
 80006d0:	2301      	movs	r3, #1
 80006d2:	747b      	strb	r3, [r7, #17]
	btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULLUP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&btn);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fda7 	bl	8000230 <GPIO_Init>

	while (1)
	{
		if (GPIO_ReadFromInputPin(btn.pGPIOx, btn.GPIO_PinConfig.GPIO_PinNumber) == BTN_PRESSED)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fdca 	bl	8000282 <GPIO_ReadFromInputPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <main+0x8c>
		{
			GPIO_WriteToOutputPort(GPIOC, LEDS_ON_MASK);
 80006f4:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <main+0x9c>)
 80006fa:	f7ff fdd6 	bl	80002aa <GPIO_WriteToOutputPort>
			delay();
 80006fe:	f7ff ffa5 	bl	800064c <delay>
 8000702:	e7ee      	b.n	80006e2 <main+0x6a>
		}
		else
		{
			GPIO_WriteToOutputPort(GPIOC, 0x0);
 8000704:	2100      	movs	r1, #0
 8000706:	4803      	ldr	r0, [pc, #12]	@ (8000714 <main+0x9c>)
 8000708:	f7ff fdcf 	bl	80002aa <GPIO_WriteToOutputPort>
		if (GPIO_ReadFromInputPin(btn.pGPIOx, btn.GPIO_PinConfig.GPIO_PinNumber) == BTN_PRESSED)
 800070c:	e7e9      	b.n	80006e2 <main+0x6a>
 800070e:	bf00      	nop
 8000710:	080007d0 	.word	0x080007d0
 8000714:	40011000 	.word	0x40011000
 8000718:	40010800 	.word	0x40010800

0800071c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000720:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <LoopForever+0x6>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	@ (800075c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <LoopForever+0xe>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	@ (8000768 <LoopForever+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800074a:	f000 f811 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800074e:	f7ff ff93 	bl	8000678 <main>

08000752 <LoopForever>:

LoopForever:
  b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   r0, =_estack
 8000754:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000760:	080007e0 	.word	0x080007e0
  ldr r2, =_sbss
 8000764:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000768:	2000001c 	.word	0x2000001c

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	2600      	movs	r6, #0
 8000774:	4d0c      	ldr	r5, [pc, #48]	@ (80007a8 <__libc_init_array+0x38>)
 8000776:	4c0d      	ldr	r4, [pc, #52]	@ (80007ac <__libc_init_array+0x3c>)
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	f000 f81a 	bl	80007b8 <_init>
 8000784:	2600      	movs	r6, #0
 8000786:	4d0a      	ldr	r5, [pc, #40]	@ (80007b0 <__libc_init_array+0x40>)
 8000788:	4c0a      	ldr	r4, [pc, #40]	@ (80007b4 <__libc_init_array+0x44>)
 800078a:	1b64      	subs	r4, r4, r5
 800078c:	10a4      	asrs	r4, r4, #2
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	080007d8 	.word	0x080007d8
 80007ac:	080007d8 	.word	0x080007d8
 80007b0:	080007d8 	.word	0x080007d8
 80007b4:	080007dc 	.word	0x080007dc

080007b8 <_init>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	bf00      	nop
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr

080007c4 <_fini>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	bf00      	nop
 80007c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ca:	bc08      	pop	{r3}
 80007cc:	469e      	mov	lr, r3
 80007ce:	4770      	bx	lr
