
stm32-baremetal-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000070c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800083c  08000844  00001844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800083c  0800083c  00001844  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800083c  0800083c  00001844  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800083c  08000844  00001844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800083c  0800083c  0000183c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000840  08000840  00001840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000844  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000844  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c79  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003bf  00000000  00000000  000024e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  000028a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b8  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000da4  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000762  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00003f6e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000338  00000000  00000000  00003fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000088  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000824 	.word	0x08000824

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000824 	.word	0x08000824

08000170 <NVIC_EnableIRQ>:
 */

#include "core_nvic.h"

void NVIC_EnableIRQ(uint8_t IRQNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b1f      	cmp	r3, #31
 800017e:	d80a      	bhi.n	8000196 <NVIC_EnableIRQ+0x26>
	{
		NVIC_ISER0 |= (1 << IRQNumber);
 8000180:	4b17      	ldr	r3, [pc, #92]	@ (80001e0 <NVIC_EnableIRQ+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	79fa      	ldrb	r2, [r7, #7]
 8000186:	2101      	movs	r1, #1
 8000188:	fa01 f202 	lsl.w	r2, r1, r2
 800018c:	4611      	mov	r1, r2
 800018e:	4a14      	ldr	r2, [pc, #80]	@ (80001e0 <NVIC_EnableIRQ+0x70>)
 8000190:	430b      	orrs	r3, r1
 8000192:	6013      	str	r3, [r2, #0]
	}
	else if (IRQNumber < 96)
	{
		NVIC_ISER2 |= (1 << (IRQNumber % 32));
	}
}
 8000194:	e01e      	b.n	80001d4 <NVIC_EnableIRQ+0x64>
	else if (IRQNumber < 64)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b3f      	cmp	r3, #63	@ 0x3f
 800019a:	d80c      	bhi.n	80001b6 <NVIC_EnableIRQ+0x46>
		NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800019c:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <NVIC_EnableIRQ+0x74>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	79fa      	ldrb	r2, [r7, #7]
 80001a2:	f002 021f 	and.w	r2, r2, #31
 80001a6:	2101      	movs	r1, #1
 80001a8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ac:	4611      	mov	r1, r2
 80001ae:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <NVIC_EnableIRQ+0x74>)
 80001b0:	430b      	orrs	r3, r1
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	e00e      	b.n	80001d4 <NVIC_EnableIRQ+0x64>
	else if (IRQNumber < 96)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	2b5f      	cmp	r3, #95	@ 0x5f
 80001ba:	d80b      	bhi.n	80001d4 <NVIC_EnableIRQ+0x64>
		NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80001bc:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <NVIC_EnableIRQ+0x78>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	79fa      	ldrb	r2, [r7, #7]
 80001c2:	f002 021f 	and.w	r2, r2, #31
 80001c6:	2101      	movs	r1, #1
 80001c8:	fa01 f202 	lsl.w	r2, r1, r2
 80001cc:	4611      	mov	r1, r2
 80001ce:	4a06      	ldr	r2, [pc, #24]	@ (80001e8 <NVIC_EnableIRQ+0x78>)
 80001d0:	430b      	orrs	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000e104 	.word	0xe000e104
 80001e8:	e000e108 	.word	0xe000e108

080001ec <GPIO_PeriClockControl>:
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle);

void GPIO_PeriClockControl(GPIO_Handle_t *pGPIOHandle, uint8_t enorDi)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	70fb      	strb	r3, [r7, #3]
	GPIO_Mode_t pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	795b      	ldrb	r3, [r3, #5]
 80001fc:	73fb      	strb	r3, [r7, #15]

	if (pinMode == GPIO_MODE_IT_RT || pinMode == GPIO_MODE_IT_FT
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	2b08      	cmp	r3, #8
 8000202:	d005      	beq.n	8000210 <GPIO_PeriClockControl+0x24>
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2b07      	cmp	r3, #7
 8000208:	d002      	beq.n	8000210 <GPIO_PeriClockControl+0x24>
			|| pinMode == GPIO_MODE_IT_RFT)
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2b09      	cmp	r3, #9
 800020e:	d105      	bne.n	800021c <GPIO_PeriClockControl+0x30>
	{
		RCC->APB2ENR |= (1 << 0);
 8000210:	4b2c      	ldr	r3, [pc, #176]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a2b      	ldr	r2, [pc, #172]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6193      	str	r3, [r2, #24]
	}

	if (enorDi == 1)
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d123      	bne.n	800026a <GPIO_PeriClockControl+0x7e>
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a28      	ldr	r2, [pc, #160]	@ (80002c8 <GPIO_PeriClockControl+0xdc>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d017      	beq.n	800025c <GPIO_PeriClockControl+0x70>
 800022c:	4a26      	ldr	r2, [pc, #152]	@ (80002c8 <GPIO_PeriClockControl+0xdc>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d83f      	bhi.n	80002b2 <GPIO_PeriClockControl+0xc6>
 8000232:	4a26      	ldr	r2, [pc, #152]	@ (80002cc <GPIO_PeriClockControl+0xe0>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d003      	beq.n	8000240 <GPIO_PeriClockControl+0x54>
 8000238:	4a25      	ldr	r2, [pc, #148]	@ (80002d0 <GPIO_PeriClockControl+0xe4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d007      	beq.n	800024e <GPIO_PeriClockControl+0x62>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_EN();
			break;
		default:
			break;
 800023e:	e038      	b.n	80002b2 <GPIO_PeriClockControl+0xc6>
			GPIOA_PCLK_EN();
 8000240:	4b20      	ldr	r3, [pc, #128]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a1f      	ldr	r2, [pc, #124]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6193      	str	r3, [r2, #24]
			break;
 800024c:	e034      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_EN();
 800024e:	4b1d      	ldr	r3, [pc, #116]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a1c      	ldr	r2, [pc, #112]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000254:	f043 0308 	orr.w	r3, r3, #8
 8000258:	6193      	str	r3, [r2, #24]
			break;
 800025a:	e02d      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_EN();
 800025c:	4b19      	ldr	r3, [pc, #100]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a18      	ldr	r2, [pc, #96]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]
			break;
 8000268:	e026      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
		}
	}
	else
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a16      	ldr	r2, [pc, #88]	@ (80002c8 <GPIO_PeriClockControl+0xdc>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d017      	beq.n	80002a4 <GPIO_PeriClockControl+0xb8>
 8000274:	4a14      	ldr	r2, [pc, #80]	@ (80002c8 <GPIO_PeriClockControl+0xdc>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d81d      	bhi.n	80002b6 <GPIO_PeriClockControl+0xca>
 800027a:	4a14      	ldr	r2, [pc, #80]	@ (80002cc <GPIO_PeriClockControl+0xe0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d003      	beq.n	8000288 <GPIO_PeriClockControl+0x9c>
 8000280:	4a13      	ldr	r2, [pc, #76]	@ (80002d0 <GPIO_PeriClockControl+0xe4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d007      	beq.n	8000296 <GPIO_PeriClockControl+0xaa>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_DI();
			break;
		default:
			break;
 8000286:	e016      	b.n	80002b6 <GPIO_PeriClockControl+0xca>
			GPIOA_PCLK_DI();
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 800028e:	f023 0304 	bic.w	r3, r3, #4
 8000292:	6193      	str	r3, [r2, #24]
			break;
 8000294:	e010      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_DI();
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 800029c:	f023 0308 	bic.w	r3, r3, #8
 80002a0:	6193      	str	r3, [r2, #24]
			break;
 80002a2:	e009      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_DI();
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a06      	ldr	r2, [pc, #24]	@ (80002c4 <GPIO_PeriClockControl+0xd8>)
 80002aa:	f023 0310 	bic.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
			break;
 80002b0:	e002      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			break;
 80002b2:	bf00      	nop
 80002b4:	e000      	b.n	80002b8 <GPIO_PeriClockControl+0xcc>
			break;
 80002b6:	bf00      	nop
		}
	}
}
 80002b8:	bf00      	nop
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40011000 	.word	0x40011000
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
// 1. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff84 	bl	80001ec <GPIO_PeriClockControl>

// 2. Configure pin mode (CNF + MODE)
	GPIO_ConfigMode(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3304      	adds	r3, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f000 f82c 	bl	800034c <GPIO_ConfigMode>

// 3. Configure speed if needed (only for output/AF)
	GPIO_ConfigSpeed(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3304      	adds	r3, #4
 80002fc:	4619      	mov	r1, r3
 80002fe:	4610      	mov	r0, r2
 8000300:	f000 f89e 	bl	8000440 <GPIO_ConfigSpeed>

// 4. Configure pull-up/pull-down if needed (only for input PU/PD)
	GPIO_ConfigPuPd(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3304      	adds	r3, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4610      	mov	r0, r2
 8000310:	f000 f8f9 	bl	8000506 <GPIO_ConfigPuPd>

// 5. Configure AFIO & EXTI registers if needed (only for interrupt modes)
	GPIO_ConfigInterrupt(pGPIOHandle);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f923 	bl	8000560 <GPIO_ConfigInterrupt>

}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	460b      	mov	r3, r1
 800032c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	78fa      	ldrb	r2, [r7, #3]
 8000334:	2101      	movs	r1, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	405a      	eors	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60da      	str	r2, [r3, #12]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
	...

0800034c <GPIO_ConfigMode>:
 * @param[in] pPinConfig Pointer to the user-defined configuration structure for the pin.
 *
 * @return None
 */
static void GPIO_ConfigMode(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	@ 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	613b      	str	r3, [r7, #16]
	uint32_t mode = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
	uint32_t cnf = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
	uint32_t shiftAmount = (pinNumber % 8) * 4;
 8000364:	693b      	ldr	r3, [r7, #16]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	60fb      	str	r3, [r7, #12]

	volatile uint32_t *pConfigReg;

	if (pinNumber <= 7)
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	2b07      	cmp	r3, #7
 8000372:	d802      	bhi.n	800037a <GPIO_ConfigMode+0x2e>
		pConfigReg = &pGPIOx->CRL;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e002      	b.n	8000380 <GPIO_ConfigMode+0x34>
	else
		pConfigReg = &pGPIOx->CRH;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3304      	adds	r3, #4
 800037e:	617b      	str	r3, [r7, #20]

	switch (pPinConfig->GPIO_PinMode)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	785b      	ldrb	r3, [r3, #1]
 8000384:	2b09      	cmp	r3, #9
 8000386:	d856      	bhi.n	8000436 <GPIO_ConfigMode+0xea>
 8000388:	a201      	add	r2, pc, #4	@ (adr r2, 8000390 <GPIO_ConfigMode+0x44>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003b9 	.word	0x080003b9
 8000394:	080003c3 	.word	0x080003c3
 8000398:	080003d7 	.word	0x080003d7
 800039c:	080003e1 	.word	0x080003e1
 80003a0:	080003eb 	.word	0x080003eb
 80003a4:	080003f5 	.word	0x080003f5
 80003a8:	080003cd 	.word	0x080003cd
 80003ac:	080003ff 	.word	0x080003ff
 80003b0:	080003ff 	.word	0x080003ff
 80003b4:	080003ff 	.word	0x080003ff
	{
	case GPIO_MODE_INPUT:
		mode = 0x0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;// Input floating
 80003bc:	2301      	movs	r3, #1
 80003be:	61bb      	str	r3, [r7, #24]
		break;
 80003c0:	e022      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_INPUT_PU_PD:
		mode = 0x0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
		break;
 80003ca:	e01d      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_ANALOG:
		mode = 0x0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
		break;
 80003d4:	e018      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_PP:
		mode = 0x1;// Medium speed (10 MHz)
 80003d6:	2301      	movs	r3, #1
 80003d8:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
		break;
 80003de:	e013      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_OD:
		mode = 0x1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
		break;
 80003e8:	e00e      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_PP:
		mode = 0x1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61bb      	str	r3, [r7, #24]
		break;
 80003f2:	e009      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_OD:
		mode = 0x1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61fb      	str	r3, [r7, #28]
		cnf = 0x3;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61bb      	str	r3, [r7, #24]
		break;
 80003fc:	e004      	b.n	8000408 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_IT_FT:
	case GPIO_MODE_IT_RT:
	case GPIO_MODE_IT_RFT:
		mode = 0x0;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
		break;
 8000406:	bf00      	nop
	default:
		return;
	}
	*pConfigReg &= ~(0xF << shiftAmount);
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	210f      	movs	r1, #15
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	43d2      	mvns	r2, r2
 8000416:	401a      	ands	r2, r3
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	601a      	str	r2, [r3, #0]
	*pConfigReg |= ((cnf << 2) | mode) << shiftAmount;
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	0099      	lsls	r1, r3, #2
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	4319      	orrs	r1, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	431a      	orrs	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	e000      	b.n	8000438 <GPIO_ConfigMode+0xec>
		return;
 8000436:	bf00      	nop
}
 8000438:	3724      	adds	r7, #36	@ 0x24
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <GPIO_ConfigSpeed>:
 * @param  pPinConfig: Pointer to the pin configuration structure
 *
 * @return None
 */
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 8000440:	b480      	push	{r7}
 8000442:	b087      	sub	sp, #28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d00b      	beq.n	800046a <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b03      	cmp	r3, #3
 8000458:	d007      	beq.n	800046a <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_PP
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	785b      	ldrb	r3, [r3, #1]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d003      	beq.n	800046a <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_OD)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d149      	bne.n	80004fe <GPIO_ConfigSpeed+0xbe>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	613b      	str	r3, [r7, #16]
		uint32_t shiftAmount = (pinNumber % 8) * 4;
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	60fb      	str	r3, [r7, #12]
		uint32_t modeBits = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
// Map enum to actual MODE[1:0] bits
		switch (pPinConfig->GPIO_PinSpeed)
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d00c      	beq.n	80004a0 <GPIO_ConfigSpeed+0x60>
 8000486:	2b02      	cmp	r3, #2
 8000488:	dc38      	bgt.n	80004fc <GPIO_ConfigSpeed+0xbc>
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <GPIO_ConfigSpeed+0x54>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d003      	beq.n	800049a <GPIO_ConfigSpeed+0x5a>
			break;
		case GPIO_SPEED_HIGH:
			modeBits = 0b11;// 50 MHz
			break;
		default:
			return;// Invalid speed
 8000492:	e033      	b.n	80004fc <GPIO_ConfigSpeed+0xbc>
			modeBits = 0b10;// 2 MHz
 8000494:	2302      	movs	r3, #2
 8000496:	617b      	str	r3, [r7, #20]
			break;
 8000498:	e005      	b.n	80004a6 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b01;// 10 MHz
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
			break;
 800049e:	e002      	b.n	80004a6 <GPIO_ConfigSpeed+0x66>
			modeBits = 0b11;// 50 MHz
 80004a0:	2303      	movs	r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
			break;
 80004a4:	bf00      	nop
		}

		if (pinNumber < 8)
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	2b07      	cmp	r3, #7
 80004aa:	d813      	bhi.n	80004d4 <GPIO_ConfigSpeed+0x94>
		{
			pGPIOx->CRL &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2103      	movs	r1, #3
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	43d2      	mvns	r2, r2
 80004ba:	401a      	ands	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	601a      	str	r2, [r3, #0]
			pGPIOx->CRL |= (modeBits << shiftAmount);// set MODE[1:0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	6979      	ldr	r1, [r7, #20]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	e014      	b.n	80004fe <GPIO_ConfigSpeed+0xbe>
		}
		else
		{
			pGPIOx->CRH &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2103      	movs	r1, #3
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	401a      	ands	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (modeBits << shiftAmount);// set MODE[1:0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	6979      	ldr	r1, [r7, #20]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	e000      	b.n	80004fe <GPIO_ConfigSpeed+0xbe>
			return;// Invalid speed
 80004fc:	bf00      	nop
		}
	}
}
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <GPIO_ConfigPuPd>:
 * @param pPinConfig Pointer to GPIO pin configuration structure.
 *
 * @return None
 */
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
// Check if the pin mode is input with pull-up or pull-down
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU_PD)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11e      	bne.n	8000556 <GPIO_ConfigPuPd+0x50>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
		switch (pPinConfig->GPIO_PinPuPdControl)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d002      	beq.n	800052c <GPIO_ConfigPuPd+0x26>
 8000526:	2b02      	cmp	r3, #2
 8000528:	d00a      	beq.n	8000540 <GPIO_ConfigPuPd+0x3a>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
			break;
		case GPIO_NOPULL:
		default:
// Do nothing
			break;
 800052a:	e014      	b.n	8000556 <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR |= (1 << pinNumber);// Set bit for pull-up
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	2101      	movs	r1, #1
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	60da      	str	r2, [r3, #12]
			break;
 800053e:	e00a      	b.n	8000556 <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	2101      	movs	r1, #1
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	43d2      	mvns	r2, r2
 800054e:	401a      	ands	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
			break;
 8000554:	bf00      	nop
		}
	}
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <GPIO_ConfigInterrupt>:
 * @note   This function only performs AFIO and EXTI configuration.
 *         NVIC configuration must be done separately using GPIO_IRQInterruptConfig().
 * @return None
 */
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	73fb      	strb	r3, [r7, #15]

	if (mode != GPIO_MODE_IT_FT && mode != GPIO_MODE_IT_RT
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	2b07      	cmp	r3, #7
 8000572:	d006      	beq.n	8000582 <GPIO_ConfigInterrupt+0x22>
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b08      	cmp	r3, #8
 8000578:	d003      	beq.n	8000582 <GPIO_ConfigInterrupt+0x22>
			&& mode != GPIO_MODE_IT_RFT)
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	2b09      	cmp	r3, #9
 800057e:	f040 8098 	bne.w	80006b2 <GPIO_ConfigInterrupt+0x152>
	{
// Not an interrupt mode, exit early
		return;
	}
	/* 1. Map GPIO port to appropriate EXTI line via AFIO_EXTICR */
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	73bb      	strb	r3, [r7, #14]
	uint8_t extiCrIndex = pinNumber / 4;
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	089b      	lsrs	r3, r3, #2
 800058c:	737b      	strb	r3, [r7, #13]
	uint8_t fieldPosition = (pinNumber % 4) * 4;
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	733b      	strb	r3, [r7, #12]

// Clear the target field first
	AFIO->EXTICR[extiCrIndex] &= ~(0xF << fieldPosition);
 800059a:	4a48      	ldr	r2, [pc, #288]	@ (80006bc <GPIO_ConfigInterrupt+0x15c>)
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	3302      	adds	r3, #2
 80005a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a4:	7b3b      	ldrb	r3, [r7, #12]
 80005a6:	210f      	movs	r1, #15
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	4942      	ldr	r1, [pc, #264]	@ (80006bc <GPIO_ConfigInterrupt+0x15c>)
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	4002      	ands	r2, r0
 80005b6:	3302      	adds	r3, #2
 80005b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// Set the port code into the field
	uint8_t port_code = GPIO_PORT_CODE(pGPIOHandle->pGPIOx);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a3f      	ldr	r2, [pc, #252]	@ (80006c0 <GPIO_ConfigInterrupt+0x160>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d00f      	beq.n	80005e6 <GPIO_ConfigInterrupt+0x86>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a3e      	ldr	r2, [pc, #248]	@ (80006c4 <GPIO_ConfigInterrupt+0x164>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d008      	beq.n	80005e2 <GPIO_ConfigInterrupt+0x82>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a3c      	ldr	r2, [pc, #240]	@ (80006c8 <GPIO_ConfigInterrupt+0x168>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d101      	bne.n	80005de <GPIO_ConfigInterrupt+0x7e>
 80005da:	2302      	movs	r3, #2
 80005dc:	e004      	b.n	80005e8 <GPIO_ConfigInterrupt+0x88>
 80005de:	2300      	movs	r3, #0
 80005e0:	e002      	b.n	80005e8 <GPIO_ConfigInterrupt+0x88>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <GPIO_ConfigInterrupt+0x88>
 80005e6:	2300      	movs	r3, #0
 80005e8:	72fb      	strb	r3, [r7, #11]
	AFIO->EXTICR[extiCrIndex] |= (port_code << fieldPosition);
 80005ea:	4a34      	ldr	r2, [pc, #208]	@ (80006bc <GPIO_ConfigInterrupt+0x15c>)
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	3302      	adds	r3, #2
 80005f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f4:	7af9      	ldrb	r1, [r7, #11]
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	492f      	ldr	r1, [pc, #188]	@ (80006bc <GPIO_ConfigInterrupt+0x15c>)
 8000600:	7b7b      	ldrb	r3, [r7, #13]
 8000602:	4302      	orrs	r2, r0
 8000604:	3302      	adds	r3, #2
 8000606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* 2. Unmask the interrupt line in EXTI_IMR */
	EXTI->IMR |= (1 << pinNumber);
 800060a:	4b30      	ldr	r3, [pc, #192]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	7bba      	ldrb	r2, [r7, #14]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a2c      	ldr	r2, [pc, #176]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6013      	str	r3, [r2, #0]

	/* 3. Configure rising/falling trigger */
	if (mode == GPIO_MODE_IT_FT)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d115      	bne.n	8000650 <GPIO_ConfigInterrupt+0xf0>
	{
		EXTI->FTSR |= (1 << pinNumber);
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	7bba      	ldrb	r2, [r7, #14]
 800062a:	2101      	movs	r1, #1
 800062c:	fa01 f202 	lsl.w	r2, r1, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4a26      	ldr	r2, [pc, #152]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 8000634:	430b      	orrs	r3, r1
 8000636:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 8000638:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	7bba      	ldrb	r2, [r7, #14]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	43d2      	mvns	r2, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800064a:	400b      	ands	r3, r1
 800064c:	6093      	str	r3, [r2, #8]
 800064e:	e031      	b.n	80006b4 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RT)
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d115      	bne.n	8000682 <GPIO_ConfigInterrupt+0x122>
	{
		EXTI->RTSR |= (1 << pinNumber);
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	7bba      	ldrb	r2, [r7, #14]
 800065c:	2101      	movs	r1, #1
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pinNumber);
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	7bba      	ldrb	r2, [r7, #14]
 8000670:	2101      	movs	r1, #1
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800067c:	400b      	ands	r3, r1
 800067e:	60d3      	str	r3, [r2, #12]
 8000680:	e018      	b.n	80006b4 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RFT)
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d115      	bne.n	80006b4 <GPIO_ConfigInterrupt+0x154>
	{
		EXTI->RTSR |= (1 << pinNumber);
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	7bba      	ldrb	r2, [r7, #14]
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << pinNumber);
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	7bba      	ldrb	r2, [r7, #14]
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <GPIO_ConfigInterrupt+0x16c>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	60d3      	str	r3, [r2, #12]
 80006b0:	e000      	b.n	80006b4 <GPIO_ConfigInterrupt+0x154>
		return;
 80006b2:	bf00      	nop
	}
}
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40010000 	.word	0x40010000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40010400 	.word	0x40010400

080006d0 <delay>:

#include "stm32f103xx_gpio_driver.h"
#include "core_nvic.h"

void delay()
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 150000; ++i);
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e002      	b.n	80006e2 <delay+0x12>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <delay+0x28>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d9f8      	bls.n	80006dc <delay+0xc>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	000249ef 	.word	0x000249ef

080006fc <main>:
GPIO_Handle_t onboardLed;
GPIO_Handle_t onboardBtn;
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

	onboardLed.pGPIOx = GPIOA;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <main+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <main+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
	onboardLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <main+0x4c>)
 8000708:	2205      	movs	r2, #5
 800070a:	711a      	strb	r2, [r3, #4]
	onboardLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <main+0x4c>)
 800070e:	2202      	movs	r2, #2
 8000710:	715a      	strb	r2, [r3, #5]
	onboardLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <main+0x4c>)
 8000714:	2201      	movs	r2, #1
 8000716:	719a      	strb	r2, [r3, #6]
	onboardLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NOPULL;
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <main+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	71da      	strb	r2, [r3, #7]

	onboardBtn.pGPIOx = GPIOC;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <main+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <main+0x58>)
 8000722:	601a      	str	r2, [r3, #0]
	onboardBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <main+0x54>)
 8000726:	220d      	movs	r2, #13
 8000728:	711a      	strb	r2, [r3, #4]
	onboardBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <main+0x54>)
 800072c:	2207      	movs	r2, #7
 800072e:	715a      	strb	r2, [r3, #5]

	GPIO_Init(&onboardLed);
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <main+0x4c>)
 8000732:	f7ff fdcf 	bl	80002d4 <GPIO_Init>
	GPIO_Init(&onboardBtn);
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <main+0x54>)
 8000738:	f7ff fdcc 	bl	80002d4 <GPIO_Init>
	NVIC_EnableIRQ(40);// EXTI15_10_IRQHandler IRQ number
 800073c:	2028      	movs	r0, #40	@ 0x28
 800073e:	f7ff fd17 	bl	8000170 <NVIC_EnableIRQ>
	while (1);
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <main+0x46>
 8000746:	bf00      	nop
 8000748:	2000001c 	.word	0x2000001c
 800074c:	40010800 	.word	0x40010800
 8000750:	20000024 	.word	0x20000024
 8000754:	40011000 	.word	0x40011000

08000758 <EXTI15_10_IRQHandler>:

	return 0;
}

void EXTI15_10_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 13);
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <EXTI15_10_IRQHandler+0x28>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <EXTI15_10_IRQHandler+0x28>)
 8000762:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000766:	6153      	str	r3, [r2, #20]
	GPIO_ToggleOutputPin(onboardLed.pGPIOx, onboardLed.GPIO_PinConfig.GPIO_PinNumber);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <EXTI15_10_IRQHandler+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <EXTI15_10_IRQHandler+0x2c>)
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fdd5 	bl	8000322 <GPIO_ToggleOutputPin>
	delay();
 8000778:	f7ff ffaa 	bl	80006d0 <delay>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010400 	.word	0x40010400
 8000784:	2000001c 	.word	0x2000001c

08000788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800078c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	@ (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	@ (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007b6:	f000 f811 	bl	80007dc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80007ba:	f7ff ff9f 	bl	80006fc <main>

080007be <LoopForever>:

LoopForever:
  b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007cc:	08000844 	.word	0x08000844
  ldr r2, =_sbss
 80007d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007d4:	2000002c 	.word	0x2000002c

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <__libc_init_array>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	2600      	movs	r6, #0
 80007e0:	4d0c      	ldr	r5, [pc, #48]	@ (8000814 <__libc_init_array+0x38>)
 80007e2:	4c0d      	ldr	r4, [pc, #52]	@ (8000818 <__libc_init_array+0x3c>)
 80007e4:	1b64      	subs	r4, r4, r5
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	42a6      	cmp	r6, r4
 80007ea:	d109      	bne.n	8000800 <__libc_init_array+0x24>
 80007ec:	f000 f81a 	bl	8000824 <_init>
 80007f0:	2600      	movs	r6, #0
 80007f2:	4d0a      	ldr	r5, [pc, #40]	@ (800081c <__libc_init_array+0x40>)
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <__libc_init_array+0x44>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	42a6      	cmp	r6, r4
 80007fc:	d105      	bne.n	800080a <__libc_init_array+0x2e>
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f855 3b04 	ldr.w	r3, [r5], #4
 8000804:	4798      	blx	r3
 8000806:	3601      	adds	r6, #1
 8000808:	e7ee      	b.n	80007e8 <__libc_init_array+0xc>
 800080a:	f855 3b04 	ldr.w	r3, [r5], #4
 800080e:	4798      	blx	r3
 8000810:	3601      	adds	r6, #1
 8000812:	e7f2      	b.n	80007fa <__libc_init_array+0x1e>
 8000814:	0800083c 	.word	0x0800083c
 8000818:	0800083c 	.word	0x0800083c
 800081c:	0800083c 	.word	0x0800083c
 8000820:	08000840 	.word	0x08000840

08000824 <_init>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	bf00      	nop
 8000828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082a:	bc08      	pop	{r3}
 800082c:	469e      	mov	lr, r3
 800082e:	4770      	bx	lr

08000830 <_fini>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	bf00      	nop
 8000834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000836:	bc08      	pop	{r3}
 8000838:	469e      	mov	lr, r3
 800083a:	4770      	bx	lr
