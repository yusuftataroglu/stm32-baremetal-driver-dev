
stm32-baremetal-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000528  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000658  08000658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000660  08000660  00001668  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000660  08000660  00001668  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000660  08000668  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000664  08000664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000668  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000668  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000aef  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000320  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000024a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008d  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000a5d  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000068c  00000000  00000000  00003052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000270  00000000  00000000  00003724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000088  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000640 	.word	0x08000640

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000640 	.word	0x08000640

08000170 <GPIO_PeriClockControl>:
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle);

void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx, uint8_t enorDi)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	if (enorDi == 1)
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d122      	bne.n	80001c8 <GPIO_PeriClockControl+0x58>
	{
		switch ((uint32_t) GPIOx)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a26      	ldr	r2, [pc, #152]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d017      	beq.n	80001ba <GPIO_PeriClockControl+0x4a>
 800018a:	4a25      	ldr	r2, [pc, #148]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 800018c:	4293      	cmp	r3, r2
 800018e:	d83e      	bhi.n	800020e <GPIO_PeriClockControl+0x9e>
 8000190:	4a24      	ldr	r2, [pc, #144]	@ (8000224 <GPIO_PeriClockControl+0xb4>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d003      	beq.n	800019e <GPIO_PeriClockControl+0x2e>
 8000196:	4a24      	ldr	r2, [pc, #144]	@ (8000228 <GPIO_PeriClockControl+0xb8>)
 8000198:	4293      	cmp	r3, r2
 800019a:	d007      	beq.n	80001ac <GPIO_PeriClockControl+0x3c>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_EN();
			break;
		default:
			break;
 800019c:	e037      	b.n	800020e <GPIO_PeriClockControl+0x9e>
			GPIOA_PCLK_EN();
 800019e:	4b23      	ldr	r3, [pc, #140]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a22      	ldr	r2, [pc, #136]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6193      	str	r3, [r2, #24]
			break;
 80001aa:	e033      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOB_PCLK_EN();
 80001ac:	4b1f      	ldr	r3, [pc, #124]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1e      	ldr	r2, [pc, #120]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]
			break;
 80001b8:	e02c      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOC_PCLK_EN();
 80001ba:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a1b      	ldr	r2, [pc, #108]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6193      	str	r3, [r2, #24]
			break;
 80001c6:	e025      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
		}
	}
	else
	{
		switch ((uint32_t) GPIOx)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4a15      	ldr	r2, [pc, #84]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 80001cc:	4293      	cmp	r3, r2
 80001ce:	d017      	beq.n	8000200 <GPIO_PeriClockControl+0x90>
 80001d0:	4a13      	ldr	r2, [pc, #76]	@ (8000220 <GPIO_PeriClockControl+0xb0>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d81d      	bhi.n	8000212 <GPIO_PeriClockControl+0xa2>
 80001d6:	4a13      	ldr	r2, [pc, #76]	@ (8000224 <GPIO_PeriClockControl+0xb4>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d003      	beq.n	80001e4 <GPIO_PeriClockControl+0x74>
 80001dc:	4a12      	ldr	r2, [pc, #72]	@ (8000228 <GPIO_PeriClockControl+0xb8>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d007      	beq.n	80001f2 <GPIO_PeriClockControl+0x82>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_DI();
			break;
		default:
			break;
 80001e2:	e016      	b.n	8000212 <GPIO_PeriClockControl+0xa2>
			GPIOA_PCLK_DI();
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a10      	ldr	r2, [pc, #64]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001ea:	f023 0304 	bic.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
			break;
 80001f0:	e010      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOB_PCLK_DI();
 80001f2:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 80001f8:	f023 0308 	bic.w	r3, r3, #8
 80001fc:	6193      	str	r3, [r2, #24]
			break;
 80001fe:	e009      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			GPIOC_PCLK_DI();
 8000200:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a09      	ldr	r2, [pc, #36]	@ (800022c <GPIO_PeriClockControl+0xbc>)
 8000206:	f023 0310 	bic.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]
			break;
 800020c:	e002      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			break;
 800020e:	bf00      	nop
 8000210:	e000      	b.n	8000214 <GPIO_PeriClockControl+0xa4>
			break;
 8000212:	bf00      	nop
		}
	}
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40011000 	.word	0x40011000
 8000224:	40010800 	.word	0x40010800
 8000228:	40010c00 	.word	0x40010c00
 800022c:	40021000 	.word	0x40021000

08000230 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
// 1. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2101      	movs	r1, #1
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff96 	bl	8000170 <GPIO_PeriClockControl>

// 2. Configure pin mode (CNF + MODE)
	GPIO_ConfigMode(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3304      	adds	r3, #4
 800024c:	4619      	mov	r1, r3
 800024e:	4610      	mov	r0, r2
 8000250:	f000 f836 	bl	80002c0 <GPIO_ConfigMode>

// 3. Configure speed if needed (only for output/AF)
	GPIO_ConfigSpeed(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3304      	adds	r3, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4610      	mov	r0, r2
 8000260:	f000 f8a8 	bl	80003b4 <GPIO_ConfigSpeed>

// 4. Configure pull-up/pull-down if needed (only for input PU/PD)
	GPIO_ConfigPuPd(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3304      	adds	r3, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4610      	mov	r0, r2
 8000270:	f000 f903 	bl	800047a <GPIO_ConfigPuPd>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <GPIO_ReadFromInputPin>:
		RCC->APB2RSTR &= ~(1 << 4);
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	fa22 f303 	lsr.w	r3, r2, r3
 8000292:	b2db      	uxtb	r3, r3
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
}
 800029a:	4618      	mov	r0, r3
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <GPIO_WriteToOutputPort>:
	else
		pGPIOx->ODR &= ~(1 << pinNumber);
}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR = value;
 80002b0:	887a      	ldrh	r2, [r7, #2]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <GPIO_ConfigMode>:
 * @param[in] pPinConfig Pointer to the user-defined configuration structure for the pin.
 *
 * @return None
 */
static void GPIO_ConfigMode(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	613b      	str	r3, [r7, #16]
	uint32_t mode = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
	uint32_t cnf = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
	uint32_t shiftAmount = (pinNumber % 8) * 4;
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	f003 0307 	and.w	r3, r3, #7
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	60fb      	str	r3, [r7, #12]

	volatile uint32_t *pConfigReg;

	if (pinNumber <= 7)
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	d802      	bhi.n	80002ee <GPIO_ConfigMode+0x2e>
		pConfigReg = &pGPIOx->CRL;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e002      	b.n	80002f4 <GPIO_ConfigMode+0x34>
	else
		pConfigReg = &pGPIOx->CRH;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3304      	adds	r3, #4
 80002f2:	617b      	str	r3, [r7, #20]

	switch (pPinConfig->GPIO_PinMode)
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	2b09      	cmp	r3, #9
 80002fa:	d856      	bhi.n	80003aa <GPIO_ConfigMode+0xea>
 80002fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000304 <GPIO_ConfigMode+0x44>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	0800032d 	.word	0x0800032d
 8000308:	08000337 	.word	0x08000337
 800030c:	0800034b 	.word	0x0800034b
 8000310:	08000355 	.word	0x08000355
 8000314:	0800035f 	.word	0x0800035f
 8000318:	08000369 	.word	0x08000369
 800031c:	08000341 	.word	0x08000341
 8000320:	08000373 	.word	0x08000373
 8000324:	08000373 	.word	0x08000373
 8000328:	08000373 	.word	0x08000373
	{
	case GPIO_MODE_INPUT:
		mode = 0x0;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;// Input floating
 8000330:	2301      	movs	r3, #1
 8000332:	61bb      	str	r3, [r7, #24]
		break;
 8000334:	e022      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_INPUT_PU_PD:
		mode = 0x0;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
		break;
 800033e:	e01d      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_ANALOG:
		mode = 0x0;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
		break;
 8000348:	e018      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_PP:
		mode = 0x1;// Medium speed (10 MHz)
 800034a:	2301      	movs	r3, #1
 800034c:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
		break;
 8000352:	e013      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_OD:
		mode = 0x1;
 8000354:	2301      	movs	r3, #1
 8000356:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 8000358:	2301      	movs	r3, #1
 800035a:	61bb      	str	r3, [r7, #24]
		break;
 800035c:	e00e      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_PP:
		mode = 0x1;
 800035e:	2301      	movs	r3, #1
 8000360:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
		break;
 8000366:	e009      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_OD:
		mode = 0x1;
 8000368:	2301      	movs	r3, #1
 800036a:	61fb      	str	r3, [r7, #28]
		cnf = 0x3;
 800036c:	2303      	movs	r3, #3
 800036e:	61bb      	str	r3, [r7, #24]
		break;
 8000370:	e004      	b.n	800037c <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_IT_FT:
	case GPIO_MODE_IT_RT:
	case GPIO_MODE_IT_RFT:
		mode = 0x0;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
		break;
 800037a:	bf00      	nop
	default:
		return;
	}
	*pConfigReg &= ~(0xF << shiftAmount);
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	210f      	movs	r1, #15
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	43d2      	mvns	r2, r2
 800038a:	401a      	ands	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	601a      	str	r2, [r3, #0]
	*pConfigReg |= ((cnf << 2) | mode) << shiftAmount;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	0099      	lsls	r1, r3, #2
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	4319      	orrs	r1, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	431a      	orrs	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	e000      	b.n	80003ac <GPIO_ConfigMode+0xec>
		return;
 80003aa:	bf00      	nop
}
 80003ac:	3724      	adds	r7, #36	@ 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <GPIO_ConfigSpeed>:
 * @param  pPinConfig: Pointer to the pin configuration structure
 *
 * @return None
 */
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d00b      	beq.n	80003de <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d007      	beq.n	80003de <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_PP
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	d003      	beq.n	80003de <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_OD)
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	785b      	ldrb	r3, [r3, #1]
 80003da:	2b05      	cmp	r3, #5
 80003dc:	d149      	bne.n	8000472 <GPIO_ConfigSpeed+0xbe>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	613b      	str	r3, [r7, #16]
		uint32_t shiftAmount = (pinNumber % 8) * 4;
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	60fb      	str	r3, [r7, #12]
		uint32_t modeBits = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
// Map enum to actual MODE[1:0] bits
		switch (pPinConfig->GPIO_PinSpeed)
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d00c      	beq.n	8000414 <GPIO_ConfigSpeed+0x60>
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	dc38      	bgt.n	8000470 <GPIO_ConfigSpeed+0xbc>
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <GPIO_ConfigSpeed+0x54>
 8000402:	2b01      	cmp	r3, #1
 8000404:	d003      	beq.n	800040e <GPIO_ConfigSpeed+0x5a>
			break;
		case GPIO_SPEED_HIGH:
			modeBits = 0b11;// 50 MHz
			break;
		default:
			return;// Invalid speed
 8000406:	e033      	b.n	8000470 <GPIO_ConfigSpeed+0xbc>
			modeBits = 0b10;// 2 MHz
 8000408:	2302      	movs	r3, #2
 800040a:	617b      	str	r3, [r7, #20]
			break;
 800040c:	e005      	b.n	800041a <GPIO_ConfigSpeed+0x66>
			modeBits = 0b01;// 10 MHz
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
			break;
 8000412:	e002      	b.n	800041a <GPIO_ConfigSpeed+0x66>
			modeBits = 0b11;// 50 MHz
 8000414:	2303      	movs	r3, #3
 8000416:	617b      	str	r3, [r7, #20]
			break;
 8000418:	bf00      	nop
		}

		if (pinNumber < 8)
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	2b07      	cmp	r3, #7
 800041e:	d813      	bhi.n	8000448 <GPIO_ConfigSpeed+0x94>
		{
			pGPIOx->CRL &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2103      	movs	r1, #3
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	43d2      	mvns	r2, r2
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	601a      	str	r2, [r3, #0]
			pGPIOx->CRL |= (modeBits << shiftAmount);// set MODE[1:0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	6979      	ldr	r1, [r7, #20]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	431a      	orrs	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	e014      	b.n	8000472 <GPIO_ConfigSpeed+0xbe>
		}
		else
		{
			pGPIOx->CRH &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2103      	movs	r1, #3
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	43d2      	mvns	r2, r2
 8000456:	401a      	ands	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (modeBits << shiftAmount);// set MODE[1:0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	6979      	ldr	r1, [r7, #20]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	e000      	b.n	8000472 <GPIO_ConfigSpeed+0xbe>
			return;// Invalid speed
 8000470:	bf00      	nop
		}
	}
}
 8000472:	371c      	adds	r7, #28
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <GPIO_ConfigPuPd>:
 * @param pPinConfig Pointer to GPIO pin configuration structure.
 *
 * @return None
 */
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 800047a:	b480      	push	{r7}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
// Check if the pin mode is input with pull-up or pull-down
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU_PD)
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	785b      	ldrb	r3, [r3, #1]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d11e      	bne.n	80004ca <GPIO_ConfigPuPd+0x50>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	60fb      	str	r3, [r7, #12]
		switch (pPinConfig->GPIO_PinPuPdControl)
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	78db      	ldrb	r3, [r3, #3]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d002      	beq.n	80004a0 <GPIO_ConfigPuPd+0x26>
 800049a:	2b02      	cmp	r3, #2
 800049c:	d00a      	beq.n	80004b4 <GPIO_ConfigPuPd+0x3a>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
			break;
		case GPIO_NOPULL:
		default:
// Do nothing
			break;
 800049e:	e014      	b.n	80004ca <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR |= (1 << pinNumber);// Set bit for pull-up
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	2101      	movs	r1, #1
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	431a      	orrs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60da      	str	r2, [r3, #12]
			break;
 80004b2:	e00a      	b.n	80004ca <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	2101      	movs	r1, #1
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	401a      	ands	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	60da      	str	r2, [r3, #12]
			break;
 80004c8:	bf00      	nop
		}
	}
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <delay>:

#define BTN_PRESSED 0
#define LEDS_ON_MASK  ( (1 << 10) | (1 << 11) | (1 << 12) )

void delay()
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 100000; ++i);
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e002      	b.n	80004e6 <delay+0x12>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3301      	adds	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <delay+0x28>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d9f8      	bls.n	80004e0 <delay+0xc>
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	0001869f 	.word	0x0001869f

08000500 <main>:

int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

	uint16_t led_pins[] = { GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12 };
 8000506:	4a24      	ldr	r2, [pc, #144]	@ (8000598 <main+0x98>)
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000510:	6018      	str	r0, [r3, #0]
 8000512:	3304      	adds	r3, #4
 8000514:	8019      	strh	r1, [r3, #0]
	for (int i = 0; i < 3; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
 800051a:	e016      	b.n	800054a <main+0x4a>
	{
		GPIO_Handle_t led;
		led.pGPIOx = GPIOC;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <main+0x9c>)
 800051e:	607b      	str	r3, [r7, #4]
		led.GPIO_PinConfig.GPIO_PinNumber = led_pins[i];
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	3320      	adds	r3, #32
 8000526:	443b      	add	r3, r7
 8000528:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	723b      	strb	r3, [r7, #8]
		led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	727b      	strb	r3, [r7, #9]
		led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000534:	2301      	movs	r3, #1
 8000536:	72bb      	strb	r3, [r7, #10]
		led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(&led);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe76 	bl	8000230 <GPIO_Init>
	for (int i = 0; i < 3; i++)
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	3301      	adds	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	2b02      	cmp	r3, #2
 800054e:	dde5      	ble.n	800051c <main+0x1c>
	}

	GPIO_Handle_t btn;
	btn.pGPIOx = GPIOA;
 8000550:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <main+0xa0>)
 8000552:	60fb      	str	r3, [r7, #12]
	btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000554:	2301      	movs	r3, #1
 8000556:	743b      	strb	r3, [r7, #16]
	btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT_PU_PD;
 8000558:	2301      	movs	r3, #1
 800055a:	747b      	strb	r3, [r7, #17]
	btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULLUP;
 800055c:	2301      	movs	r3, #1
 800055e:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&btn);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe63 	bl	8000230 <GPIO_Init>

	while (1)
	{
		if (GPIO_ReadFromInputPin(btn.pGPIOx, btn.GPIO_PinConfig.GPIO_PinNumber) == BTN_PRESSED)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	7c3a      	ldrb	r2, [r7, #16]
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe83 	bl	800027c <GPIO_ReadFromInputPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d107      	bne.n	800058c <main+0x8c>
		{
			GPIO_WriteToOutputPort(GPIOC, LEDS_ON_MASK);
 800057c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000580:	4806      	ldr	r0, [pc, #24]	@ (800059c <main+0x9c>)
 8000582:	f7ff fe8f 	bl	80002a4 <GPIO_WriteToOutputPort>
			delay();
 8000586:	f7ff ffa5 	bl	80004d4 <delay>
 800058a:	e7ee      	b.n	800056a <main+0x6a>
		}
		else
		{
			GPIO_WriteToOutputPort(GPIOC, 0x0);
 800058c:	2100      	movs	r1, #0
 800058e:	4803      	ldr	r0, [pc, #12]	@ (800059c <main+0x9c>)
 8000590:	f7ff fe88 	bl	80002a4 <GPIO_WriteToOutputPort>
		if (GPIO_ReadFromInputPin(btn.pGPIOx, btn.GPIO_PinConfig.GPIO_PinNumber) == BTN_PRESSED)
 8000594:	e7e9      	b.n	800056a <main+0x6a>
 8000596:	bf00      	nop
 8000598:	08000658 	.word	0x08000658
 800059c:	40011000 	.word	0x40011000
 80005a0:	40010800 	.word	0x40010800

080005a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	@ (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	@ (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	@ (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005d2:	f000 f811 	bl	80005f8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005d6:	f7ff ff93 	bl	8000500 <main>

080005da <LoopForever>:

LoopForever:
  b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005e8:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 80005ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005f0:	2000001c 	.word	0x2000001c

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <__libc_init_array>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2600      	movs	r6, #0
 80005fc:	4d0c      	ldr	r5, [pc, #48]	@ (8000630 <__libc_init_array+0x38>)
 80005fe:	4c0d      	ldr	r4, [pc, #52]	@ (8000634 <__libc_init_array+0x3c>)
 8000600:	1b64      	subs	r4, r4, r5
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	42a6      	cmp	r6, r4
 8000606:	d109      	bne.n	800061c <__libc_init_array+0x24>
 8000608:	f000 f81a 	bl	8000640 <_init>
 800060c:	2600      	movs	r6, #0
 800060e:	4d0a      	ldr	r5, [pc, #40]	@ (8000638 <__libc_init_array+0x40>)
 8000610:	4c0a      	ldr	r4, [pc, #40]	@ (800063c <__libc_init_array+0x44>)
 8000612:	1b64      	subs	r4, r4, r5
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	42a6      	cmp	r6, r4
 8000618:	d105      	bne.n	8000626 <__libc_init_array+0x2e>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000620:	4798      	blx	r3
 8000622:	3601      	adds	r6, #1
 8000624:	e7ee      	b.n	8000604 <__libc_init_array+0xc>
 8000626:	f855 3b04 	ldr.w	r3, [r5], #4
 800062a:	4798      	blx	r3
 800062c:	3601      	adds	r6, #1
 800062e:	e7f2      	b.n	8000616 <__libc_init_array+0x1e>
 8000630:	08000660 	.word	0x08000660
 8000634:	08000660 	.word	0x08000660
 8000638:	08000660 	.word	0x08000660
 800063c:	08000664 	.word	0x08000664

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
