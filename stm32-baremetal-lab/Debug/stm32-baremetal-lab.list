
stm32-baremetal-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e98  08000e98  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e98  08000e98  00002010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e98  08000e98  00002010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e98  08000e98  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e98  08000e98  00001e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e9c  08000e9c  00001e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000ea0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000010  08000eb0  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000eb0  0000206c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c19  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b2  00000000  00000000  00003c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00004308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000136  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000181f  00000000  00000000  000045e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000e39  00000000  00000000  00005e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00006c3e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000600  00000000  00000000  00006c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000088  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e80 	.word	0x08000e80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000e80 	.word	0x08000e80

08000170 <NVIC_EnableIRQ>:
 */

#include "core_nvic.h"

void NVIC_EnableIRQ(IRQNumber_t IRQNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b1f      	cmp	r3, #31
 8000180:	dc0b      	bgt.n	800019a <NVIC_EnableIRQ+0x2a>
	{
		NVIC_ISER0 |= (1 << IRQNumber);
 8000182:	4b1f      	ldr	r3, [pc, #124]	@ (8000200 <NVIC_EnableIRQ+0x90>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800018a:	2101      	movs	r1, #1
 800018c:	fa01 f202 	lsl.w	r2, r1, r2
 8000190:	4611      	mov	r1, r2
 8000192:	4a1b      	ldr	r2, [pc, #108]	@ (8000200 <NVIC_EnableIRQ+0x90>)
 8000194:	430b      	orrs	r3, r1
 8000196:	6013      	str	r3, [r2, #0]
	}
	else if (IRQNumber < 96)
	{
		NVIC_ISER2 |= (1 << (IRQNumber % 32));
	}
}
 8000198:	e02c      	b.n	80001f4 <NVIC_EnableIRQ+0x84>
	else if (IRQNumber < 64)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	2b3f      	cmp	r3, #63	@ 0x3f
 80001a0:	dc12      	bgt.n	80001c8 <NVIC_EnableIRQ+0x58>
		NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80001a2:	4b18      	ldr	r3, [pc, #96]	@ (8000204 <NVIC_EnableIRQ+0x94>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001aa:	4259      	negs	r1, r3
 80001ac:	f003 031f 	and.w	r3, r3, #31
 80001b0:	f001 011f 	and.w	r1, r1, #31
 80001b4:	bf58      	it	pl
 80001b6:	424b      	negpl	r3, r1
 80001b8:	b25b      	sxtb	r3, r3
 80001ba:	4619      	mov	r1, r3
 80001bc:	2301      	movs	r3, #1
 80001be:	408b      	lsls	r3, r1
 80001c0:	4910      	ldr	r1, [pc, #64]	@ (8000204 <NVIC_EnableIRQ+0x94>)
 80001c2:	4313      	orrs	r3, r2
 80001c4:	600b      	str	r3, [r1, #0]
}
 80001c6:	e015      	b.n	80001f4 <NVIC_EnableIRQ+0x84>
	else if (IRQNumber < 96)
 80001c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001cc:	2b5f      	cmp	r3, #95	@ 0x5f
 80001ce:	dc11      	bgt.n	80001f4 <NVIC_EnableIRQ+0x84>
		NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80001d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000208 <NVIC_EnableIRQ+0x98>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	4259      	negs	r1, r3
 80001da:	f003 031f 	and.w	r3, r3, #31
 80001de:	f001 011f 	and.w	r1, r1, #31
 80001e2:	bf58      	it	pl
 80001e4:	424b      	negpl	r3, r1
 80001e6:	b25b      	sxtb	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	2301      	movs	r3, #1
 80001ec:	408b      	lsls	r3, r1
 80001ee:	4906      	ldr	r1, [pc, #24]	@ (8000208 <NVIC_EnableIRQ+0x98>)
 80001f0:	4313      	orrs	r3, r2
 80001f2:	600b      	str	r3, [r1, #0]
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100
 8000204:	e000e104 	.word	0xe000e104
 8000208:	e000e108 	.word	0xe000e108

0800020c <GPIO_PeriClockControl>:
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig);
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle);

void GPIO_PeriClockControl(GPIO_Handle_t *pGPIOHandle, uint8_t enorDi)
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	70fb      	strb	r3, [r7, #3]
	GPIO_Mode_t pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	795b      	ldrb	r3, [r3, #5]
 800021c:	73fb      	strb	r3, [r7, #15]

	if (pinMode == GPIO_MODE_IT_RT || pinMode == GPIO_MODE_IT_FT
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	2b08      	cmp	r3, #8
 8000222:	d005      	beq.n	8000230 <GPIO_PeriClockControl+0x24>
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	2b07      	cmp	r3, #7
 8000228:	d002      	beq.n	8000230 <GPIO_PeriClockControl+0x24>
			|| pinMode == GPIO_MODE_IT_RFT)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b09      	cmp	r3, #9
 800022e:	d105      	bne.n	800023c <GPIO_PeriClockControl+0x30>
	{
		RCC->APB2ENR |= (1 << 0);
 8000230:	4b2c      	ldr	r3, [pc, #176]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a2b      	ldr	r2, [pc, #172]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6193      	str	r3, [r2, #24]
	}

	if (enorDi == 1)
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d123      	bne.n	800028a <GPIO_PeriClockControl+0x7e>
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a28      	ldr	r2, [pc, #160]	@ (80002e8 <GPIO_PeriClockControl+0xdc>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d017      	beq.n	800027c <GPIO_PeriClockControl+0x70>
 800024c:	4a26      	ldr	r2, [pc, #152]	@ (80002e8 <GPIO_PeriClockControl+0xdc>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d83f      	bhi.n	80002d2 <GPIO_PeriClockControl+0xc6>
 8000252:	4a26      	ldr	r2, [pc, #152]	@ (80002ec <GPIO_PeriClockControl+0xe0>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d003      	beq.n	8000260 <GPIO_PeriClockControl+0x54>
 8000258:	4a25      	ldr	r2, [pc, #148]	@ (80002f0 <GPIO_PeriClockControl+0xe4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d007      	beq.n	800026e <GPIO_PeriClockControl+0x62>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_EN();
			break;
		default:
			break;
 800025e:	e038      	b.n	80002d2 <GPIO_PeriClockControl+0xc6>
			GPIOA_PCLK_EN();
 8000260:	4b20      	ldr	r3, [pc, #128]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1f      	ldr	r2, [pc, #124]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
			break;
 800026c:	e034      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_EN();
 800026e:	4b1d      	ldr	r3, [pc, #116]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a1c      	ldr	r2, [pc, #112]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000274:	f043 0308 	orr.w	r3, r3, #8
 8000278:	6193      	str	r3, [r2, #24]
			break;
 800027a:	e02d      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_EN();
 800027c:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
			break;
 8000288:	e026      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
		}
	}
	else
	{
		switch ((uint32_t) pGPIOHandle->pGPIOx)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a16      	ldr	r2, [pc, #88]	@ (80002e8 <GPIO_PeriClockControl+0xdc>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d017      	beq.n	80002c4 <GPIO_PeriClockControl+0xb8>
 8000294:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <GPIO_PeriClockControl+0xdc>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d81d      	bhi.n	80002d6 <GPIO_PeriClockControl+0xca>
 800029a:	4a14      	ldr	r2, [pc, #80]	@ (80002ec <GPIO_PeriClockControl+0xe0>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d003      	beq.n	80002a8 <GPIO_PeriClockControl+0x9c>
 80002a0:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <GPIO_PeriClockControl+0xe4>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d007      	beq.n	80002b6 <GPIO_PeriClockControl+0xaa>
			break;
		case (uint32_t) GPIOC:
			GPIOC_PCLK_DI();
			break;
		default:
			break;
 80002a6:	e016      	b.n	80002d6 <GPIO_PeriClockControl+0xca>
			GPIOA_PCLK_DI();
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002ae:	f023 0304 	bic.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
			break;
 80002b4:	e010      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			GPIOB_PCLK_DI();
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002bc:	f023 0308 	bic.w	r3, r3, #8
 80002c0:	6193      	str	r3, [r2, #24]
			break;
 80002c2:	e009      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			GPIOC_PCLK_DI();
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <GPIO_PeriClockControl+0xd8>)
 80002ca:	f023 0310 	bic.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
			break;
 80002d0:	e002      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			break;
 80002d2:	bf00      	nop
 80002d4:	e000      	b.n	80002d8 <GPIO_PeriClockControl+0xcc>
			break;
 80002d6:	bf00      	nop
		}
	}
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40011000 	.word	0x40011000
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
// 1. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle, ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f7ff ff84 	bl	800020c <GPIO_PeriClockControl>

// 2. Configure pin mode (CNF + MODE)
	GPIO_ConfigMode(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3304      	adds	r3, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4610      	mov	r0, r2
 8000310:	f000 f850 	bl	80003b4 <GPIO_ConfigMode>

// 3. Configure speed if needed (only for output/AF)
	GPIO_ConfigSpeed(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3304      	adds	r3, #4
 800031c:	4619      	mov	r1, r3
 800031e:	4610      	mov	r0, r2
 8000320:	f000 f8c2 	bl	80004a8 <GPIO_ConfigSpeed>

// 4. Configure pull-up/pull-down if needed (only for input PU/PD)
	GPIO_ConfigPuPd(pGPIOHandle->pGPIOx, &(pGPIOHandle->GPIO_PinConfig));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3304      	adds	r3, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4610      	mov	r0, r2
 8000330:	f000 f91d 	bl	800056e <GPIO_ConfigPuPd>

// 5. Configure AFIO & EXTI registers if needed (only for interrupt modes)
	GPIO_ConfigInterrupt(pGPIOHandle);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f953 	bl	80005e0 <GPIO_ConfigInterrupt>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}

08000342 <GPIO_WriteToOutputPin>:
{
	return (uint16_t) pGPIOx->IDR;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber, uint8_t value)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	460b      	mov	r3, r1
 800034c:	70fb      	strb	r3, [r7, #3]
 800034e:	4613      	mov	r3, r2
 8000350:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 8000352:	78bb      	ldrb	r3, [r7, #2]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d109      	bne.n	800036c <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << pinNumber);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	78fa      	ldrb	r2, [r7, #3]
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	431a      	orrs	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	60da      	str	r2, [r3, #12]
	else
		pGPIOx->ODR &= ~(1 << pinNumber);
}
 800036a:	e009      	b.n	8000380 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << pinNumber);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	78fa      	ldrb	r2, [r7, #3]
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	401a      	ands	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, GPIO_PinNumber_t pinNumber)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	78fa      	ldrb	r2, [r7, #3]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	405a      	eors	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	60da      	str	r2, [r3, #12]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
	...

080003b4 <GPIO_ConfigMode>:
 * @param[in] pPinConfig Pointer to the user-defined configuration structure for the pin.
 *
 * @return None
 */
static void GPIO_ConfigMode(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b089      	sub	sp, #36	@ 0x24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	613b      	str	r3, [r7, #16]
	uint32_t mode = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
	uint32_t cnf = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
	uint32_t shiftAmount = (pinNumber % 8) * 4;
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]

	volatile uint32_t *pConfigReg;

	if (pinNumber <= 7)
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	2b07      	cmp	r3, #7
 80003da:	d802      	bhi.n	80003e2 <GPIO_ConfigMode+0x2e>
		pConfigReg = &pGPIOx->CRL;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e002      	b.n	80003e8 <GPIO_ConfigMode+0x34>
	else
		pConfigReg = &pGPIOx->CRH;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3304      	adds	r3, #4
 80003e6:	617b      	str	r3, [r7, #20]

	switch (pPinConfig->GPIO_PinMode)
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	785b      	ldrb	r3, [r3, #1]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	d856      	bhi.n	800049e <GPIO_ConfigMode+0xea>
 80003f0:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <GPIO_ConfigMode+0x44>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	08000421 	.word	0x08000421
 80003fc:	0800042b 	.word	0x0800042b
 8000400:	0800043f 	.word	0x0800043f
 8000404:	08000449 	.word	0x08000449
 8000408:	08000453 	.word	0x08000453
 800040c:	0800045d 	.word	0x0800045d
 8000410:	08000435 	.word	0x08000435
 8000414:	08000467 	.word	0x08000467
 8000418:	08000467 	.word	0x08000467
 800041c:	08000467 	.word	0x08000467
	{
	case GPIO_MODE_INPUT:
		mode = 0x0;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;// Input floating
 8000424:	2301      	movs	r3, #1
 8000426:	61bb      	str	r3, [r7, #24]
		break;
 8000428:	e022      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_INPUT_PU_PD:
		mode = 0x0;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 800042e:	2302      	movs	r3, #2
 8000430:	61bb      	str	r3, [r7, #24]
		break;
 8000432:	e01d      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_ANALOG:
		mode = 0x0;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
		break;
 800043c:	e018      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_PP:
		mode = 0x1;// Medium speed (10 MHz)
 800043e:	2301      	movs	r3, #1
 8000440:	61fb      	str	r3, [r7, #28]
		cnf = 0x0;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
		break;
 8000446:	e013      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_OUTPUT_OD:
		mode = 0x1;
 8000448:	2301      	movs	r3, #1
 800044a:	61fb      	str	r3, [r7, #28]
		cnf = 0x1;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
		break;
 8000450:	e00e      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_PP:
		mode = 0x1;
 8000452:	2301      	movs	r3, #1
 8000454:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 8000456:	2302      	movs	r3, #2
 8000458:	61bb      	str	r3, [r7, #24]
		break;
 800045a:	e009      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_AF_OD:
		mode = 0x1;
 800045c:	2301      	movs	r3, #1
 800045e:	61fb      	str	r3, [r7, #28]
		cnf = 0x3;
 8000460:	2303      	movs	r3, #3
 8000462:	61bb      	str	r3, [r7, #24]
		break;
 8000464:	e004      	b.n	8000470 <GPIO_ConfigMode+0xbc>
	case GPIO_MODE_IT_FT:
	case GPIO_MODE_IT_RT:
	case GPIO_MODE_IT_RFT:
		mode = 0x0;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
		cnf = 0x2;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
		break;
 800046e:	bf00      	nop
	default:
		return;
	}
	*pConfigReg &= ~(0xF << shiftAmount);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	210f      	movs	r1, #15
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	43d2      	mvns	r2, r2
 800047e:	401a      	ands	r2, r3
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	601a      	str	r2, [r3, #0]
	*pConfigReg |= ((cnf << 2) | mode) << shiftAmount;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	0099      	lsls	r1, r3, #2
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	4319      	orrs	r1, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	431a      	orrs	r2, r3
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	e000      	b.n	80004a0 <GPIO_ConfigMode+0xec>
		return;
 800049e:	bf00      	nop
}
 80004a0:	3724      	adds	r7, #36	@ 0x24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <GPIO_ConfigSpeed>:
 * @param  pPinConfig: Pointer to the pin configuration structure
 *
 * @return None
 */
static void GPIO_ConfigSpeed(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	if (pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	785b      	ldrb	r3, [r3, #1]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d00b      	beq.n	80004d2 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	785b      	ldrb	r3, [r3, #1]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d007      	beq.n	80004d2 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_PP
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	785b      	ldrb	r3, [r3, #1]
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d003      	beq.n	80004d2 <GPIO_ConfigSpeed+0x2a>
			|| pPinConfig->GPIO_PinMode == GPIO_MODE_AF_OD)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	d149      	bne.n	8000566 <GPIO_ConfigSpeed+0xbe>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	613b      	str	r3, [r7, #16]
		uint32_t shiftAmount = (pinNumber % 8) * 4;
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	60fb      	str	r3, [r7, #12]
		uint32_t modeBits = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
// Map enum to actual MODE[1:0] bits
		switch (pPinConfig->GPIO_PinSpeed)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d00c      	beq.n	8000508 <GPIO_ConfigSpeed+0x60>
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	dc38      	bgt.n	8000564 <GPIO_ConfigSpeed+0xbc>
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d002      	beq.n	80004fc <GPIO_ConfigSpeed+0x54>
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <GPIO_ConfigSpeed+0x5a>
			break;
		case GPIO_SPEED_HIGH:
			modeBits = 0b11;// 50 MHz
			break;
		default:
			return;// Invalid speed
 80004fa:	e033      	b.n	8000564 <GPIO_ConfigSpeed+0xbc>
			modeBits = 0b10;// 2 MHz
 80004fc:	2302      	movs	r3, #2
 80004fe:	617b      	str	r3, [r7, #20]
			break;
 8000500:	e005      	b.n	800050e <GPIO_ConfigSpeed+0x66>
			modeBits = 0b01;// 10 MHz
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
			break;
 8000506:	e002      	b.n	800050e <GPIO_ConfigSpeed+0x66>
			modeBits = 0b11;// 50 MHz
 8000508:	2303      	movs	r3, #3
 800050a:	617b      	str	r3, [r7, #20]
			break;
 800050c:	bf00      	nop
		}

		if (pinNumber < 8)
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	2b07      	cmp	r3, #7
 8000512:	d813      	bhi.n	800053c <GPIO_ConfigSpeed+0x94>
		{
			pGPIOx->CRL &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2103      	movs	r1, #3
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	43d2      	mvns	r2, r2
 8000522:	401a      	ands	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
			pGPIOx->CRL |= (modeBits << shiftAmount);// set MODE[1:0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	6979      	ldr	r1, [r7, #20]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e014      	b.n	8000566 <GPIO_ConfigSpeed+0xbe>
		}
		else
		{
			pGPIOx->CRH &= ~(0x3 << shiftAmount);// clear MODE[1:0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2103      	movs	r1, #3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	43d2      	mvns	r2, r2
 800054a:	401a      	ands	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (modeBits << shiftAmount);// set MODE[1:0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	6979      	ldr	r1, [r7, #20]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	e000      	b.n	8000566 <GPIO_ConfigSpeed+0xbe>
			return;// Invalid speed
 8000564:	bf00      	nop
		}
	}
}
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <GPIO_ConfigPuPd>:
 * @param pPinConfig Pointer to GPIO pin configuration structure.
 *
 * @return None
 */
static void GPIO_ConfigPuPd(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
// Check if the pin mode is input with pull-up or pull-down
	GPIO_Mode_t pinMode = pPinConfig->GPIO_PinMode;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	73fb      	strb	r3, [r7, #15]

	if (pinMode == GPIO_MODE_INPUT_PU_PD || pinMode == GPIO_MODE_IT_FT
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d008      	beq.n	8000596 <GPIO_ConfigPuPd+0x28>
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2b07      	cmp	r3, #7
 8000588:	d005      	beq.n	8000596 <GPIO_ConfigPuPd+0x28>
			|| pinMode == GPIO_MODE_IT_RT || pinMode == GPIO_MODE_IT_RFT)
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2b08      	cmp	r3, #8
 800058e:	d002      	beq.n	8000596 <GPIO_ConfigPuPd+0x28>
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	2b09      	cmp	r3, #9
 8000594:	d11e      	bne.n	80005d4 <GPIO_ConfigPuPd+0x66>
	{
		uint32_t pinNumber = pPinConfig->GPIO_PinNumber;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	60bb      	str	r3, [r7, #8]
		switch (pPinConfig->GPIO_PinPuPdControl)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	78db      	ldrb	r3, [r3, #3]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d002      	beq.n	80005aa <GPIO_ConfigPuPd+0x3c>
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d00a      	beq.n	80005be <GPIO_ConfigPuPd+0x50>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
			break;
		case GPIO_NOPULL:
		default:
// Do nothing
			break;
 80005a8:	e014      	b.n	80005d4 <GPIO_ConfigPuPd+0x66>
			pGPIOx->ODR |= (1 << pinNumber);// Set bit for pull-up
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	2101      	movs	r1, #1
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60da      	str	r2, [r3, #12]
			break;
 80005bc:	e00a      	b.n	80005d4 <GPIO_ConfigPuPd+0x66>
			pGPIOx->ODR &= ~(1 << pinNumber);// Clear bit for pull-down
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	2101      	movs	r1, #1
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	43d2      	mvns	r2, r2
 80005cc:	401a      	ands	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60da      	str	r2, [r3, #12]
			break;
 80005d2:	bf00      	nop
		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <GPIO_ConfigInterrupt>:
 * @note   This function only performs AFIO and EXTI configuration.
 *         NVIC configuration must be done separately using GPIO_IRQInterruptConfig().
 * @return None
 */
static void GPIO_ConfigInterrupt(GPIO_Handle_t *pGPIOHandle)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint8_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	73fb      	strb	r3, [r7, #15]

	if (mode != GPIO_MODE_IT_FT && mode != GPIO_MODE_IT_RT
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d006      	beq.n	8000602 <GPIO_ConfigInterrupt+0x22>
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d003      	beq.n	8000602 <GPIO_ConfigInterrupt+0x22>
			&& mode != GPIO_MODE_IT_RFT)
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	f040 8098 	bne.w	8000732 <GPIO_ConfigInterrupt+0x152>
	{
// Not an interrupt mode, exit early
		return;
	}
	/* 1. Map GPIO port to appropriate EXTI line via AFIO_EXTICR */
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	73bb      	strb	r3, [r7, #14]
	uint8_t extiCrIndex = pinNumber / 4;
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	089b      	lsrs	r3, r3, #2
 800060c:	737b      	strb	r3, [r7, #13]
	uint8_t fieldPosition = (pinNumber % 4) * 4;
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f003 0303 	and.w	r3, r3, #3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	733b      	strb	r3, [r7, #12]

// Clear the target field first
	AFIO->EXTICR[extiCrIndex] &= ~(0xF << fieldPosition);
 800061a:	4a48      	ldr	r2, [pc, #288]	@ (800073c <GPIO_ConfigInterrupt+0x15c>)
 800061c:	7b7b      	ldrb	r3, [r7, #13]
 800061e:	3302      	adds	r3, #2
 8000620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	210f      	movs	r1, #15
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	4942      	ldr	r1, [pc, #264]	@ (800073c <GPIO_ConfigInterrupt+0x15c>)
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	4002      	ands	r2, r0
 8000636:	3302      	adds	r3, #2
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// Set the port code into the field
	uint8_t port_code = GPIO_PORT_CODE(pGPIOHandle->pGPIOx);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a3f      	ldr	r2, [pc, #252]	@ (8000740 <GPIO_ConfigInterrupt+0x160>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d00f      	beq.n	8000666 <GPIO_ConfigInterrupt+0x86>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a3e      	ldr	r2, [pc, #248]	@ (8000744 <GPIO_ConfigInterrupt+0x164>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d008      	beq.n	8000662 <GPIO_ConfigInterrupt+0x82>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a3c      	ldr	r2, [pc, #240]	@ (8000748 <GPIO_ConfigInterrupt+0x168>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <GPIO_ConfigInterrupt+0x7e>
 800065a:	2302      	movs	r3, #2
 800065c:	e004      	b.n	8000668 <GPIO_ConfigInterrupt+0x88>
 800065e:	2300      	movs	r3, #0
 8000660:	e002      	b.n	8000668 <GPIO_ConfigInterrupt+0x88>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <GPIO_ConfigInterrupt+0x88>
 8000666:	2300      	movs	r3, #0
 8000668:	72fb      	strb	r3, [r7, #11]
	AFIO->EXTICR[extiCrIndex] |= (port_code << fieldPosition);
 800066a:	4a34      	ldr	r2, [pc, #208]	@ (800073c <GPIO_ConfigInterrupt+0x15c>)
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	3302      	adds	r3, #2
 8000670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000674:	7af9      	ldrb	r1, [r7, #11]
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	4618      	mov	r0, r3
 800067e:	492f      	ldr	r1, [pc, #188]	@ (800073c <GPIO_ConfigInterrupt+0x15c>)
 8000680:	7b7b      	ldrb	r3, [r7, #13]
 8000682:	4302      	orrs	r2, r0
 8000684:	3302      	adds	r3, #2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* 2. Unmask the interrupt line in EXTI_IMR */
	EXTI->IMR |= (1 << pinNumber);
 800068a:	4b30      	ldr	r3, [pc, #192]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	7bba      	ldrb	r2, [r7, #14]
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a2c      	ldr	r2, [pc, #176]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6013      	str	r3, [r2, #0]

	/* 3. Configure rising/falling trigger */
	if (mode == GPIO_MODE_IT_FT)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d115      	bne.n	80006d0 <GPIO_ConfigInterrupt+0xf0>
	{
		EXTI->FTSR |= (1 << pinNumber);
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	7bba      	ldrb	r2, [r7, #14]
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a26      	ldr	r2, [pc, #152]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pinNumber);
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	7bba      	ldrb	r2, [r7, #14]
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a20      	ldr	r2, [pc, #128]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006ca:	400b      	ands	r3, r1
 80006cc:	6093      	str	r3, [r2, #8]
 80006ce:	e031      	b.n	8000734 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RT)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b08      	cmp	r3, #8
 80006d4:	d115      	bne.n	8000702 <GPIO_ConfigInterrupt+0x122>
	{
		EXTI->RTSR |= (1 << pinNumber);
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	7bba      	ldrb	r2, [r7, #14]
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a19      	ldr	r2, [pc, #100]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pinNumber);
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	7bba      	ldrb	r2, [r7, #14]
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a14      	ldr	r2, [pc, #80]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	60d3      	str	r3, [r2, #12]
 8000700:	e018      	b.n	8000734 <GPIO_ConfigInterrupt+0x154>
	}
	else if (mode == GPIO_MODE_IT_RFT)
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b09      	cmp	r3, #9
 8000706:	d115      	bne.n	8000734 <GPIO_ConfigInterrupt+0x154>
	{
		EXTI->RTSR |= (1 << pinNumber);
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	7bba      	ldrb	r2, [r7, #14]
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << pinNumber);
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	7bba      	ldrb	r2, [r7, #14]
 8000722:	2101      	movs	r1, #1
 8000724:	fa01 f202 	lsl.w	r2, r1, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <GPIO_ConfigInterrupt+0x16c>)
 800072c:	430b      	orrs	r3, r1
 800072e:	60d3      	str	r3, [r2, #12]
 8000730:	e000      	b.n	8000734 <GPIO_ConfigInterrupt+0x154>
		return;
 8000732:	bf00      	nop
	}
}
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40010000 	.word	0x40010000
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40011000 	.word	0x40011000
 800074c:	40010400 	.word	0x40010400

08000750 <SPI_PeriClockControl>:
static void SPI_CloseReception(SPI_Handle_t *pSPIHandle);
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_Handle_t *pSPIHandle, uint8_t enOrDi)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d117      	bne.n	8000792 <SPI_PeriClockControl+0x42>
	{
		if (pSPIHandle->pSPIx == SPI1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <SPI_PeriClockControl+0x7c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <SPI_PeriClockControl+0x2a>
			SPI1_PCLK_EN();
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 8000772:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000776:	6193      	str	r3, [r2, #24]
		if (pSPIHandle->pSPIx == SPI1)
			SPI1_PCLK_DI();
		else if (pSPIHandle->pSPIx == SPI2)
			SPI2_PCLK_DI();
	}
}
 8000778:	e022      	b.n	80007c0 <SPI_PeriClockControl+0x70>
		else if (pSPIHandle->pSPIx == SPI2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <SPI_PeriClockControl+0x84>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d11d      	bne.n	80007c0 <SPI_PeriClockControl+0x70>
			SPI2_PCLK_EN();
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	61d3      	str	r3, [r2, #28]
}
 8000790:	e016      	b.n	80007c0 <SPI_PeriClockControl+0x70>
		if (pSPIHandle->pSPIx == SPI1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <SPI_PeriClockControl+0x7c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <SPI_PeriClockControl+0x5a>
			SPI1_PCLK_DI();
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 80007a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007a6:	6193      	str	r3, [r2, #24]
}
 80007a8:	e00a      	b.n	80007c0 <SPI_PeriClockControl+0x70>
		else if (pSPIHandle->pSPIx == SPI2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <SPI_PeriClockControl+0x84>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d105      	bne.n	80007c0 <SPI_PeriClockControl+0x70>
			SPI2_PCLK_DI();
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a05      	ldr	r2, [pc, #20]	@ (80007d0 <SPI_PeriClockControl+0x80>)
 80007ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007be:	61d3      	str	r3, [r2, #28]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40013000 	.word	0x40013000
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40003800 	.word	0x40003800

080007d8 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
// 1. Enable clock for SPI peripheral
	SPI_PeriClockControl(pSPIHandle, ENABLE);
 80007e0:	2101      	movs	r1, #1
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffb4 	bl	8000750 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]

// 2. Configure device mode (Master/Slave)
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]

// 3. Configure bus configuration
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_FULL_DUPLEX)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d104      	bne.n	800080a <SPI_Init+0x32>
	{
// Clear BIDIMODE (bit 15) for full-duplex
		tempreg &= ~(1 << 15);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e014      	b.n	8000834 <SPI_Init+0x5c>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_HALF_DUPLEX)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d104      	bne.n	800081c <SPI_Init+0x44>
	{
// Set BIDIMODE for half-duplex
		tempreg |= (1 << 15);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e00b      	b.n	8000834 <SPI_Init+0x5c>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d107      	bne.n	8000834 <SPI_Init+0x5c>
	{
// Clear BIDIMODE and set RXONLY for simplex RX
		tempreg &= ~(1 << 15);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800082a:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000832:	60fb      	str	r3, [r7, #12]
	}

// 4. Configure SPI clock speed (baud rate control BR[2:0])
	tempreg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << 3);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	799b      	ldrb	r3, [r3, #6]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

// 5. Configure DFF (data frame format)
	tempreg |= (pSPIHandle->SPI_Config.SPI_DFF << 11);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	02db      	lsls	r3, r3, #11
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4313      	orrs	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

// 6. Configure CPOL
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << 1);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a1b      	ldrb	r3, [r3, #8]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

// 7. Configure CPHA
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPHA << 0);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

// 8. Configure software slave management (SSM)
	tempreg |= (pSPIHandle->SPI_Config.SPI_SSM << 9);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a9b      	ldrb	r3, [r3, #10]
 8000868:	025b      	lsls	r3, r3, #9
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

// 9. Configure internal slave select bit
	if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_ENABLED)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7a9b      	ldrb	r3, [r3, #10]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d103      	bne.n	8000880 <SPI_Init+0xa8>
	{
		tempreg |= (1 << 8);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800087e:	60fb      	str	r3, [r7, #12]
	}

// Write the final CR1 value
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]

	uint32_t tempreg2 = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

	if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_DISABLED)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7a9b      	ldrb	r3, [r3, #10]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <SPI_Init+0xc4>
	{
		tempreg2 |= (1 << 2);// SSOE enable
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	60bb      	str	r3, [r7, #8]
	}

	pSPIHandle->pSPIx->CR2 = tempreg2;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	605a      	str	r2, [r3, #4]

	SPI_GPIO_Config(pSPIHandle);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f805 	bl	80008b4 <SPI_GPIO_Config>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <SPI_GPIO_Config>:
 *        - SPI2: PB13 (SCK), PB14 (MISO), PB15 (MOSI)
 *
 * @return None
 */
static void SPI_GPIO_Config(SPI_Handle_t *pSPIHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t SPIPins;

	if (pSPIHandle->pSPIx == SPI1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <SPI_GPIO_Config+0x94>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d11b      	bne.n	80008fe <SPI_GPIO_Config+0x4a>
	{
// SCK
		SPIPins.pGPIOx = GPIOA;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <SPI_GPIO_Config+0x98>)
 80008c8:	60bb      	str	r3, [r7, #8]
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80008ca:	2305      	movs	r3, #5
 80008cc:	733b      	strb	r3, [r7, #12]
		SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 80008ce:	2304      	movs	r3, #4
 80008d0:	737b      	strb	r3, [r7, #13]
		SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
		GPIO_Init(&SPIPins);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd0a 	bl	80002f4 <GPIO_Init>

// MISO
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80008e0:	2306      	movs	r3, #6
 80008e2:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fd03 	bl	80002f4 <GPIO_Init>

// MOSI
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80008ee:	2307      	movs	r3, #7
 80008f0:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fcfc 	bl	80002f4 <GPIO_Init>

// MOSI
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
		GPIO_Init(&SPIPins);
	}
}
 80008fc:	e01f      	b.n	800093e <SPI_GPIO_Config+0x8a>
	else if (pSPIHandle->pSPIx == SPI2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <SPI_GPIO_Config+0x9c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d11a      	bne.n	800093e <SPI_GPIO_Config+0x8a>
		SPIPins.pGPIOx = GPIOB;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <SPI_GPIO_Config+0xa0>)
 800090a:	60bb      	str	r3, [r7, #8]
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800090c:	230d      	movs	r3, #13
 800090e:	733b      	strb	r3, [r7, #12]
		SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 8000910:	2304      	movs	r3, #4
 8000912:	737b      	strb	r3, [r7, #13]
		SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000914:	2301      	movs	r3, #1
 8000916:	73bb      	strb	r3, [r7, #14]
		GPIO_Init(&SPIPins);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fce9 	bl	80002f4 <GPIO_Init>
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000922:	230e      	movs	r3, #14
 8000924:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fce2 	bl	80002f4 <GPIO_Init>
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000930:	230f      	movs	r3, #15
 8000932:	733b      	strb	r3, [r7, #12]
		GPIO_Init(&SPIPins);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fcdb 	bl	80002f4 <GPIO_Init>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40013000 	.word	0x40013000
 800094c:	40010800 	.word	0x40010800
 8000950:	40003800 	.word	0x40003800
 8000954:	40010c00 	.word	0x40010c00

08000958 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d106      	bne.n	8000978 <SPI_PeripheralControl+0x20>
	{
// Enable SPE bit
		pSPIx->CR1 |= (1 << 6);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
	else
	{
// Disable SPE bit
		pSPIx->CR1 &= ~(1 << 6);
	}
}
 8000976:	e005      	b.n	8000984 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << 6);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <SPI_IRQHandling>:
	}
	return FLAG_RESET;
}

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
// Check for TXE
	uint8_t txe_flag = pSPIHandle->pSPIx->SR & SPI_FLAG_TXE;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	73fb      	strb	r3, [r7, #15]
	uint8_t txe_ie = pSPIHandle->pSPIx->CR2 & SPI_CR2_TXEIE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80009b0:	73bb      	strb	r3, [r7, #14]

	if (txe_flag && txe_ie)
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <SPI_IRQHandling+0x36>
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <SPI_IRQHandling+0x36>
		spi_txe_interrupt_handle(pSPIHandle);// Handle TXE interrupt
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f879 	bl	8000ab6 <spi_txe_interrupt_handle>

// Check for RXNE
	uint8_t rxne_flag = pSPIHandle->pSPIx->SR & SPI_FLAG_RXNE;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	737b      	strb	r3, [r7, #13]
	uint8_t rxne_ie = pSPIHandle->pSPIx->CR2 & SPI_CR2_RXNEIE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009de:	733b      	strb	r3, [r7, #12]

	if (rxne_flag && rxne_ie)
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <SPI_IRQHandling+0x64>
 80009e6:	7b3b      	ldrb	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <SPI_IRQHandling+0x64>
		spi_rxne_interrupt_handle(pSPIHandle);// Handle RXNE interrupt
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f8a3 	bl	8000b38 <spi_rxne_interrupt_handle>

// Check for OVR
	uint8_t ovr_flag = pSPIHandle->pSPIx->SR & SPI_FLAG_OVR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	72fb      	strb	r3, [r7, #11]
	uint8_t err_ie = pSPIHandle->pSPIx->CR2 & SPI_CR2_ERRIE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	72bb      	strb	r3, [r7, #10]

	if (ovr_flag && err_ie)
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <SPI_IRQHandling+0x94>
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <SPI_IRQHandling+0x94>
	{
// Handle OVR error
//spi_ovr_err_interrupt_handle(pSPIHandle); /* OVR'yi öğrendikten sonra ekleyebilirim */
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f973 	bl	8000d08 <SPI_ApplicationEventCallback>
	}
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <SPI_SendData_IT>:

uint8_t SPI_SendData_IT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	7f1b      	ldrb	r3, [r3, #28]
 8000a3a:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_TX)
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d010      	beq.n	8000a64 <SPI_SendData_IT+0x3a>
	{
// Save the Tx buffer address and length
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2202      	movs	r2, #2
 8000a52:	771a      	strb	r2, [r3, #28]

// Enable TXEIE control bit to trigger interrupt
		pSPIHandle->pSPIx->CR2 |= (SPI_CR2_TXEIE);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a62:	605a      	str	r2, [r3, #4]
	}
	return state;
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SPI_ReceiveData_IT>:

uint8_t SPI_ReceiveData_IT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	7f5b      	ldrb	r3, [r3, #29]
 8000a80:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_RX)
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d010      	beq.n	8000aaa <SPI_ReceiveData_IT+0x3a>
	{
// Save RX transfer details to the handle
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2201      	movs	r2, #1
 8000a98:	775a      	strb	r2, [r3, #29]

// Enable RXNE interrupt
		pSPIHandle->pSPIx->CR2 |= (SPI_CR2_RXNEIE);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000aa8:	605a      	str	r2, [r3, #4]
	}
	return state;
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <spi_txe_interrupt_handle>:
 * Sends the next byte/word of data if available, otherwise ends transmission.
 *
 * @param[in] pSPIHandle Pointer to SPI handle structure.
 */
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	if (pSPIHandle->TxLen > 0)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d029      	beq.n	8000b1a <spi_txe_interrupt_handle+0x64>
	{
		if (pSPIHandle->SPI_Config.SPI_DFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	79db      	ldrb	r3, [r3, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d015      	beq.n	8000afa <spi_txe_interrupt_handle+0x44>
		{
// 16-bit data
			pSPIHandle->pSPIx->DR = *((uint16_t*) pSPIHandle->pTxBuffer);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60da      	str	r2, [r3, #12]
			pSPIHandle->TxLen -= 2;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	1e9a      	subs	r2, r3, #2
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	615a      	str	r2, [r3, #20]
			pSPIHandle->pTxBuffer++;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60da      	str	r2, [r3, #12]
			pSPIHandle->pTxBuffer++;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	e00f      	b.n	8000b1a <spi_txe_interrupt_handle+0x64>
		}
		else
		{
// 8-bit data
			pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60da      	str	r2, [r3, #12]
			pSPIHandle->TxLen--;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	615a      	str	r2, [r3, #20]
			pSPIHandle->pTxBuffer++;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60da      	str	r2, [r3, #12]
		}
	}

	if (pSPIHandle->TxLen == 0)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d106      	bne.n	8000b30 <spi_txe_interrupt_handle+0x7a>
	{
		SPI_CloseTransmission(pSPIHandle);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f84b 	bl	8000bbe <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f8ec 	bl	8000d08 <SPI_ApplicationEventCallback>
	}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <spi_rxne_interrupt_handle>:
 * Reads the received data and stores it in the Rx buffer.
 *
 * @param[in] pSPIHandle Pointer to SPI handle structure.
 */
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if (pSPIHandle->RxLen > 0)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d02b      	beq.n	8000ba0 <spi_rxne_interrupt_handle+0x68>
	{
		if (pSPIHandle->SPI_Config.SPI_DFF)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	79db      	ldrb	r3, [r3, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d016      	beq.n	8000b7e <spi_rxne_interrupt_handle+0x46>
		{
			*((uint16_t*) pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	b292      	uxth	r2, r2
 8000b5c:	801a      	strh	r2, [r3, #0]
			pSPIHandle->RxLen -= 2;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	1e9a      	subs	r2, r3, #2
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRxBuffer++;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	611a      	str	r2, [r3, #16]
			pSPIHandle->pRxBuffer++;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	e010      	b.n	8000ba0 <spi_rxne_interrupt_handle+0x68>
		}
		else
		{
			*(pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	701a      	strb	r2, [r3, #0]
			pSPIHandle->RxLen--;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRxBuffer++;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	611a      	str	r2, [r3, #16]
		}
	}

	if (pSPIHandle->RxLen == 0)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d106      	bne.n	8000bb6 <spi_rxne_interrupt_handle+0x7e>
	{
		SPI_CloseReception(pSPIHandle);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f822 	bl	8000bf2 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f8a9 	bl	8000d08 <SPI_ApplicationEventCallback>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <SPI_CloseTransmission>:
 * @param[in] pSPIHandle  Pointer to the SPI handle structure.
 *
 * @note This function is intended to be called from the IRQ handler after the transmission is complete.
 */
static void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
// Disable TXE interrupt
	pSPIHandle->pSPIx->CR2 &= ~(SPI_CR2_TXEIE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bd4:	605a      	str	r2, [r3, #4]

// Reset application buffer and state
	pSPIHandle->pTxBuffer = NULL;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	771a      	strb	r2, [r3, #28]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SPI_CloseReception>:
 * @param[in] pSPIHandle  Pointer to the SPI handle structure.
 *
 * @note This function is intended to be called from the IRQ handler after the reception is complete.
 */
static void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
// Disable RXNE interrupt
	pSPIHandle->pSPIx->CR2 &= ~(SPI_CR2_RXNEIE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c08:	605a      	str	r2, [r3, #4]

// Reset application buffer and state
	pSPIHandle->pRxBuffer = NULL;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	775a      	strb	r2, [r3, #29]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <delay>:

#define SPI_BUFFER_SIZE  sizeof(txData)
#define LED_TOGGLE_COUNT  10

void delay(uint32_t count)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < count; i++);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e002      	b.n	8000c3a <delay+0x14>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d3f8      	bcc.n	8000c34 <delay+0xe>
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
GPIO_Handle_t ledTxIndicator;
GPIO_Handle_t ledRxIndicator;
SPI_Handle_t SPI1Handle;

int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	ledTxIndicator.pGPIOx = GPIOA;
 8000c54:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <main+0x9c>)
 8000c56:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <main+0xa0>)
 8000c58:	601a      	str	r2, [r3, #0]
	ledTxIndicator.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <main+0x9c>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	715a      	strb	r2, [r3, #5]
	ledTxIndicator.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000c60:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <main+0x9c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	711a      	strb	r2, [r3, #4]
	ledTxIndicator.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <main+0x9c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	719a      	strb	r2, [r3, #6]

	ledRxIndicator.pGPIOx = GPIOA;
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <main+0xa4>)
 8000c6e:	4a20      	ldr	r2, [pc, #128]	@ (8000cf0 <main+0xa0>)
 8000c70:	601a      	str	r2, [r3, #0]
	ledRxIndicator.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <main+0xa4>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	715a      	strb	r2, [r3, #5]
	ledRxIndicator.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <main+0xa4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	711a      	strb	r2, [r3, #4]
	ledRxIndicator.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <main+0xa4>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&ledTxIndicator);
 8000c84:	4819      	ldr	r0, [pc, #100]	@ (8000cec <main+0x9c>)
 8000c86:	f7ff fb35 	bl	80002f4 <GPIO_Init>
	GPIO_Init(&ledRxIndicator);
 8000c8a:	481a      	ldr	r0, [pc, #104]	@ (8000cf4 <main+0xa4>)
 8000c8c:	f7ff fb32 	bl	80002f4 <GPIO_Init>

	SPI1Handle.pSPIx = SPI1;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0xa8>)
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <main+0xac>)
 8000c94:	601a      	str	r2, [r3, #0]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_FULL_DUPLEX;
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <main+0xa8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	715a      	strb	r2, [r3, #5]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_FIRST_EDGE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <main+0xa8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	725a      	strb	r2, [r3, #9]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <main+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	721a      	strb	r2, [r3, #8]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_MODE_MASTER;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <main+0xa8>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	711a      	strb	r2, [r3, #4]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_ENABLED;
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <main+0xa8>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	729a      	strb	r2, [r3, #10]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <main+0xa8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	71da      	strb	r2, [r3, #7]
	SPI_Init(&SPI1Handle);
 8000cba:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <main+0xa8>)
 8000cbc:	f7ff fd8c 	bl	80007d8 <SPI_Init>
	NVIC_EnableIRQ(SPI1_IRQn);// Enable SPI1 IRQ
 8000cc0:	2023      	movs	r0, #35	@ 0x23
 8000cc2:	f7ff fa55 	bl	8000170 <NVIC_EnableIRQ>
	SPI_PeripheralControl(SPI1Handle.pSPIx, ENABLE);// Enable SPI1
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0xa8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe43 	bl	8000958 <SPI_PeripheralControl>
	SPI_ReceiveData_IT(&SPI1Handle, rxData, sizeof(rxData));// Start RX first
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	490a      	ldr	r1, [pc, #40]	@ (8000d00 <main+0xb0>)
 8000cd6:	4808      	ldr	r0, [pc, #32]	@ (8000cf8 <main+0xa8>)
 8000cd8:	f7ff feca 	bl	8000a70 <SPI_ReceiveData_IT>
	SPI_SendData_IT(&SPI1Handle, txData, sizeof(txData));// Then start TX
 8000cdc:	220f      	movs	r2, #15
 8000cde:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <main+0xb4>)
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <main+0xa8>)
 8000ce2:	f7ff fea2 	bl	8000a2a <SPI_SendData_IT>

	while (1);
 8000ce6:	bf00      	nop
 8000ce8:	e7fd      	b.n	8000ce6 <main+0x96>
 8000cea:	bf00      	nop
 8000cec:	2000003c 	.word	0x2000003c
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	20000044 	.word	0x20000044
 8000cf8:	2000004c 	.word	0x2000004c
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	20000000 	.word	0x20000000

08000d08 <SPI_ApplicationEventCallback>:

	return 0;
}

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	if (AppEv == SPI_EVENT_TX_CMPLT)
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d115      	bne.n	8000d46 <SPI_ApplicationEventCallback+0x3e>
	{
// Transmission complete (can toggle LED or set flag)
		for (uint8_t i = 0; i < LED_TOGGLE_COUNT; ++i)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e00e      	b.n	8000d3e <SPI_ApplicationEventCallback+0x36>
		{
			GPIO_ToggleOutputPin(ledTxIndicator.pGPIOx, ledTxIndicator.GPIO_PinConfig.GPIO_PinNumber);
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <SPI_ApplicationEventCallback+0x98>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <SPI_ApplicationEventCallback+0x98>)
 8000d26:	7912      	ldrb	r2, [r2, #4]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fb2d 	bl	800038a <GPIO_ToggleOutputPin>
			delay(30000);
 8000d30:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000d34:	f7ff ff77 	bl	8000c26 <delay>
		for (uint8_t i = 0; i < LED_TOGGLE_COUNT; ++i)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	2b09      	cmp	r3, #9
 8000d42:	d9ed      	bls.n	8000d20 <SPI_ApplicationEventCallback+0x18>
		{
// Mismatch detected
			GPIO_WriteToOutputPin(ledRxIndicator.pGPIOx, ledRxIndicator.GPIO_PinConfig.GPIO_PinNumber, 1);
		}
	}
}
 8000d44:	e028      	b.n	8000d98 <SPI_ApplicationEventCallback+0x90>
	else if (AppEv == SPI_EVENT_RX_CMPLT)
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d125      	bne.n	8000d98 <SPI_ApplicationEventCallback+0x90>
		if (memcmp(txData, rxData, sizeof(txData)) == 0)// Compare data
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	4915      	ldr	r1, [pc, #84]	@ (8000da4 <SPI_ApplicationEventCallback+0x9c>)
 8000d50:	4815      	ldr	r0, [pc, #84]	@ (8000da8 <SPI_ApplicationEventCallback+0xa0>)
 8000d52:	f000 f860 	bl	8000e16 <memcmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d115      	bne.n	8000d88 <SPI_ApplicationEventCallback+0x80>
			for (uint8_t i = 0; i < LED_TOGGLE_COUNT; ++i)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73bb      	strb	r3, [r7, #14]
 8000d60:	e00e      	b.n	8000d80 <SPI_ApplicationEventCallback+0x78>
				GPIO_ToggleOutputPin(ledRxIndicator.pGPIOx, ledRxIndicator.GPIO_PinConfig.GPIO_PinNumber);
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <SPI_ApplicationEventCallback+0xa4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <SPI_ApplicationEventCallback+0xa4>)
 8000d68:	7912      	ldrb	r2, [r2, #4]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb0c 	bl	800038a <GPIO_ToggleOutputPin>
				delay(30000);
 8000d72:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000d76:	f7ff ff56 	bl	8000c26 <delay>
			for (uint8_t i = 0; i < LED_TOGGLE_COUNT; ++i)
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	73bb      	strb	r3, [r7, #14]
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	2b09      	cmp	r3, #9
 8000d84:	d9ed      	bls.n	8000d62 <SPI_ApplicationEventCallback+0x5a>
}
 8000d86:	e007      	b.n	8000d98 <SPI_ApplicationEventCallback+0x90>
			GPIO_WriteToOutputPin(ledRxIndicator.pGPIOx, ledRxIndicator.GPIO_PinConfig.GPIO_PinNumber, 1);
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <SPI_ApplicationEventCallback+0xa4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <SPI_ApplicationEventCallback+0xa4>)
 8000d8e:	7911      	ldrb	r1, [r2, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fad5 	bl	8000342 <GPIO_WriteToOutputPin>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000003c 	.word	0x2000003c
 8000da4:	2000002c 	.word	0x2000002c
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000044 	.word	0x20000044

08000db0 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI1Handle);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <SPI1_IRQHandler+0x10>)
 8000db6:	f7ff fdea 	bl	800098e <SPI_IRQHandling>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000004c 	.word	0x2000004c

08000dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000df2:	f000 f821 	bl	8000e38 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000df6:	f7ff ff2b 	bl	8000c50 <main>

08000dfa <LoopForever>:

LoopForever:
  b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e08:	08000ea0 	.word	0x08000ea0
  ldr r2, =_sbss
 8000e0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e10:	2000006c 	.word	0x2000006c

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>

08000e16 <memcmp>:
 8000e16:	b510      	push	{r4, lr}
 8000e18:	3901      	subs	r1, #1
 8000e1a:	4402      	add	r2, r0
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d101      	bne.n	8000e24 <memcmp+0xe>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e005      	b.n	8000e30 <memcmp+0x1a>
 8000e24:	7803      	ldrb	r3, [r0, #0]
 8000e26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d001      	beq.n	8000e32 <memcmp+0x1c>
 8000e2e:	1b18      	subs	r0, r3, r4
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	3001      	adds	r0, #1
 8000e34:	e7f2      	b.n	8000e1c <memcmp+0x6>
	...

08000e38 <__libc_init_array>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4d0c      	ldr	r5, [pc, #48]	@ (8000e70 <__libc_init_array+0x38>)
 8000e3e:	4c0d      	ldr	r4, [pc, #52]	@ (8000e74 <__libc_init_array+0x3c>)
 8000e40:	1b64      	subs	r4, r4, r5
 8000e42:	10a4      	asrs	r4, r4, #2
 8000e44:	42a6      	cmp	r6, r4
 8000e46:	d109      	bne.n	8000e5c <__libc_init_array+0x24>
 8000e48:	f000 f81a 	bl	8000e80 <_init>
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	4d0a      	ldr	r5, [pc, #40]	@ (8000e78 <__libc_init_array+0x40>)
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <__libc_init_array+0x44>)
 8000e52:	1b64      	subs	r4, r4, r5
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	42a6      	cmp	r6, r4
 8000e58:	d105      	bne.n	8000e66 <__libc_init_array+0x2e>
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e60:	4798      	blx	r3
 8000e62:	3601      	adds	r6, #1
 8000e64:	e7ee      	b.n	8000e44 <__libc_init_array+0xc>
 8000e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6a:	4798      	blx	r3
 8000e6c:	3601      	adds	r6, #1
 8000e6e:	e7f2      	b.n	8000e56 <__libc_init_array+0x1e>
 8000e70:	08000e98 	.word	0x08000e98
 8000e74:	08000e98 	.word	0x08000e98
 8000e78:	08000e98 	.word	0x08000e98
 8000e7c:	08000e9c 	.word	0x08000e9c

08000e80 <_init>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr

08000e8c <_fini>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr
